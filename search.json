[{"title":"浅谈网页「深色模式」的实现","url":"//post/about-darkmode/","content":"\n\n随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 [Media Queries Level 5](https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme)，越来越多的网站开始添加深色模式。\n\n我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个夜间模式插件^（原文链接已丢失）^。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的夜间模式是如何实现的。\n\n<!-- more -->\n\n![](https://vip2.loli.net/2021/02/17/tYEURzvx7LQ4mej.png)\n\n## 关于深色模式\n\n![](https://vip2.loli.net/2021/02/17/jXVHb1aAUf5pRhk.png)\n\nDark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.[^1]\n\n{% info 翻译 %}\n深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。\n{% endinfo %}\n\n## 界面设计[^1]\n\n### 颜色\n\n**不要使用 100% 的纯黑**\n\nGoogle 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 \"不要使用 100% 的纯黑\" 。\n\nGoogle 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）\n\n为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。\n\nGoogle 推荐使用 `#121212` 来作为深色模式的**主背景色**。\n\n{% img https://vip2.loli.net/2021/02/17/QOjZ8D2PnW6wtSN.png 700 %}\n\nA dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it's easier to see shadows on grey (instead of black).\n\nDark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.\n\n{% info 翻译 %}\n深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。\n\n深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。\n{% endinfo %}\n\n许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。\n\n---\n\n**不要让亮色占据过多面积**\n\n在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。\n\n{% img https://vip2.loli.net/2021/02/17/o1x4jPm92AWECZp.png 300 %}\n\n▲ 正确示例\n\n{% img https://vip1.loli.net/2021/02/17/SguCOs4WM5Gqd7I.png 300 %}\n\n▲ 错误示例\n\n---\n\n**不要使用过高的色彩饱和度**\n\n在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：\n\n![](https://vip1.loli.net/2021/02/17/u16JvHsZBgeFYER.png)\n\n色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。\n\n最佳做法是使用 \"去饱和色\" ，这样可以提高清晰度，并减少视觉抖动。\n\n![](https://vip2.loli.net/2021/02/17/YxOwh46ZFNIC5Rg.png)\n\n### 层次\n\n在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。\n\n![](https://vip1.loli.net/2021/02/17/O7qzgYK98DGLvCV.png)\n\n▲ Google 给出的示例\n\n---\n\n这是 WWDC 2019 中苹果设计师讲到深色模式的文本：\n\n![](https://vip1.loli.net/2021/02/17/Amac2CMl4bzurYe.png)\n\nApple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。[^2]\n\n---\n\n![](https://vip1.loli.net/2021/02/17/OHZqYmAaQDJ9RBe.png)\n\n在组件表面^(1)^上放置一个白色半透明的遮罩层^(2)^，就可以体现出深色模式中的层次。\n\n## 代码实现\n\n这个主题使用了向 `body` 添加 `.dark` 类来实现深色模式。\n\n### 利用 Media Query 简单实现深色模式\n\n可以直接为深色模式编写独立的样式：\n\n```css\nbody {\n    color: #111;\n}\n\n@media (prefers-color-scheme: dark) {\n    body.dark {\n        color: #eee;\n    }\n}\n```\n\n更进一步地，还可以使用 CSS Variable 来简化代码：\n\n```css\n:root {\n    --text: #111;\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --text: #eee;\n    }\n}\n\nbody {\n    color: var(--text);\n}\n```\n\n还可以利用 `<link>` 标签的 Media Query 来有条件地加载文件，节省流量：\n\n```css\n/* main.css */\nbody {\n    color: #111;\n}\n\n/* dark.css */\nbody {\n    color: #eee;\n}\n```\n\n{% warn %}\n需要注意 CSS 选择器的权重，因此作为可选的 `dark.css` 一定要放在 `main.css` 之后加载。\n{% endwarn %}\n\n```html\n<link rel=\"stylesheet\" href=\"main.css\">\n<link rel=\"stylesheet\" href=\"dark.css\" media=\"(prefers-color-scheme: dark)\">\n```\n\n### 使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式\n\n```css\n:root {\n    --text: #111;\n}\n\n.dark {\n    --text: #eee;\n}\n\nbody {\n    color: var(--text);\n}\n```\n\n这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。\n\n```javascript\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    if ((window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches)\n        || new Date().getHours() >= 19 || new Date().getHours() < 7) {\n        document.body.classList.add('dark');\n    }\n});\n```\n\n此段代码中开启深色模式的条件有两个：\n\n+ 系统开启了深色模式\n+ 时间在晚7点~早7点之间\n\n只要满足上述任意一个条件，深色模式就会被开启。\n\n### 使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式[^3]\n\n```css\n:root {\n    --text: #111;\n}\n\n.dark {\n    --text: #eee;\n}\n\nbody {\n    color: var(--text);\n}\n```\n\n这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。\n\n先定义一些常量：\n\n```javascript\nconst rootElement = document.documentElement;\nconst darkModeClassName = 'dark';\nconst darkModeStorageKey = 'user-color-scheme';\nconst darkModeTogglebuttonElement = document.getElementById('dark-mode-toggle-button');\nconst validColorModeKeys = { 'dark': true, 'light': true }\nconst invertDarkModeObj = { 'dark': 'light', 'light': 'dark' }\n```\n\n接下来使用 `try {} catch (e) {}` 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：\n\n```javascript\nconst setLocalStorage = (key, value) => {\n    try {\n        localStorage.setItem(key, value);\n    } catch (e) {}\n}\n\nconst removeLocalStorage = (key) => {\n    try {\n        localStorage.removeItem(key);\n    } catch (e) {}\n}\n\nconst getLocalStorage = (key) => {\n    try {\n        return localStorage.getItem(key);\n    } catch (e) {\n        return null;    // 与 localStorage 中没有找到对应 key 的行为一致\n    }\n}\n```\n\n获取当前 `prefers-color-scheme` 的方法：\n\n```javascript\nconst getModeFromCSSMediaQuery = () => {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n}\n```\n\n再写一个清除 Class 和 LocalStorage 的函数：\n\n```javascript\nconst resetRootDarkModeClassAndLocalStorage = () => {\n    rootElement.classList.remove(darkModeClassName);\n    rootElement.classList.remove(invertDarkModeObj[darkModeClassName]);\n    removeLocalStorage(darkModeStorageKey);\n}\n```\n\n接下来就是起主要作用的函数了，负责为 `<body>` 标签增删深色模式的 Class ：\n\n```javascript\nconst applyCustomDarkModeSettings = (mode) => {\n    // 接受从「开关」处传来的模式，或者从 localStorage 读取\n    const currentSetting = mode || getLocalStorage(darkModeStorageKey);\n\n    if (currentSetting === getModeFromCSSMediaQuery()) {\n        // 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式\n        resetRootDarkModeClassAndLocalStorage();\n    } else if (validColorModeKeys[currentSetting]) {\n        rootElement.classList.add(currentSetting);\n        rootElement.classList.remove(invertDarkModeObj[currentSetting]);\n    } else {\n        // 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null\n        // 或者 localStorage 被篡改，currentSetting 不是合法值\n        resetRootDarkModeClassAndLocalStorage();\n    }\n}\n```\n\n还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中\n\n```javascript\nconst toggleCustomDarkMode = () => {\n    let currentSetting = getLocalStorage(darkModeStorageKey);\n\n    if (validColorModeKeys[currentSetting]) {\n        // 从 localStorage 中读取模式，并取相反的模式\n        currentSetting = invertDarkModeObj[currentSetting];\n    } else if (currentSetting === null) {\n        // localStorage 中没有相关值，或者 localStorage 抛了 Error\n        // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n        currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n    } else {\n        // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n        return; // 直接 return;\n    }\n    // 将相反的模式写入 localStorage\n    setLocalStorage(darkModeStorageKey, currentSetting);\n\n    return currentSetting;\n}\n```\n\n相关的函数都定义完了，是时候添加执行了：\n\n```javascript\n// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）\napplyCustomDarkModeSettings();\n```\n\n```javascript\n// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效\ndarkModeTogglebuttonElement.addEventListener('click', () => {\n    applyCustomDarkModeSettings(toggleCustomDarkMode());\n});\n```\n\n<iframe src=\"https://codesandbox.io/embed/shiyong-media-query-toggle-button-shixiangensuixitongshoudongqiehuanshensemoshi-7d60d?autoresize=1&fontsize=16&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow: hidden;\" title=\"使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n### 使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式\n\nCSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。\n\n在函数 `toggleCustomDarkMode()` 中添加写入一个时间戳的操作：\n\n```diff\n const toggleCustomDarkMode = () => {\n     let currentSetting = getLocalStorage(darkModeStorageKey);\n \n     if (validColorModeKeys[currentSetting]) {\n         // 从 localStorage 中读取模式，并取相反的模式\n         currentSetting = invertDarkModeObj[currentSetting];\n     } else if (currentSetting === null) {\n         // localStorage 中没有相关值，或者 localStorage 抛了 Error\n         // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n         currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n     } else {\n         // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n         return; // 直接 return;\n     }\n     // 将相反的模式写入 localStorage\n     setLocalStorage(darkModeStorageKey, currentSetting);\n+    setLocalStorage(darkModeTimeKey, +new Date());\n \n     return currentSetting;\n };\n```\n\n新编写一个检测函数，用来检测是否符合定时条件：\n\n```javascript\nconst checkDarkModeTime = () => {\n    if (new Date().getHours() >= 19 || new Date().getHours() < 7) {\n        // 晚7点到早7点\n        let darkModeTime = getLocalStorage(darkModeTimeKey);\n        if (darkModeTime === null || new Date().getTime() - new Date(darkModeTime).getTime() > 43200) {\n            // 没有设置过\n            return true;\n        } else {\n            // 设置过\n            return false;\n        }\n    } else {\n        return false;\n    }\n};\n```\n\n在页面加载时新增一个 `if` 语句判断开启条件：\n\n```javascript\n// 当页面加载时，先判断时间\nif (checkDarkModeTime()) {\n    // 定时开启深色模式\n    applyCustomDarkModeSettings(darkModeClassName);\n    setLocalStorage(darkModeStorageKey, darkModeClassName);\n    setLocalStorage(darkModeTimeKey, +new Date());\n} else {\n    // 将显示模式设置为 localStorage 中自定义的值（如果有的话）\n    applyCustomDarkModeSettings();\n}\n```\n\n<iframe src=\"https://codesandbox.io/embed/shiyong-media-query-toggle-button-javascript-shixiangensuixitongdingshishoudongqiehuanshensemoshi-dyei7?autoresize=1&fontsize=14&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n## 参考资料\n\n[^1]: [Dark theme - Material Design](https://material.io/design/color/dark-theme.html)  \n[^2]: [What's New in iOS Design - WWDC 2019](https://developer.apple.com/videos/play/wwdc2019/808/)  \n[^3]: [你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka's Blog](https://blog.skk.moe/post/hello-darkmode-my-old-friend/)  \n\n*文章头图来自：https://material.io/design/color/dark-theme.html*\n","tags":["Web"]},{"title":"Linux Systemd 入门","url":"//post/linux-systemd/","content":"\n\n## Systemd 简介\n\nSystemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。[^1]\n\n目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。\n\n## 常用命令列表[^2]\n\n+ 列出所有已加载的单元：`systemctl list-units`\n+ 查看指定的单元的配置：`systemctl cat [serviceName]` *(e.g. `systemctl cat sshd.service`)*\n+ 修改指定单元的配置：`systemctl edit [serviceName]` *(e.g. `systemctl edit sshd.service`)*\n+ 查看指定的单元的运行状态： `systemctl status [serviceName|pid]` *(e.g. `systemctl status sshd.service`)*\n  + 如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。\n  + 如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。\n  + 如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 `--all` 连用，则同时显示所有已加载的单元（可以用 `-t` 限定单元类型）的状态信息。\n+ 启动指定的单元：`systemctl start [serviceName]` *(e.g. `systemctl start sshd.service`)*\n  + 被指定的单元必须是已经被加载的。\n+ 重新启动指定的单元：`systemctl restart [serviceName]` *(e.g. `systemctl restart sshd.service`)*\n  + 如果指定的单元没有启动，则直接启动它们。\n+ 停止指定的单元：`systemctl stop [serviceName]` *(e.g. `systemctl stop sshd.service`)*\n+ 启用指定的单元：`systemctl enable [serviceName]` *(e.g. `systemctl enable sshd.service`)*\n+ 停用指定的单元：`systemctl disable [serviceName]` *(e.g. `systemctl disable sshd.service`)*\n+ 重新加载指定的单元的配置：`systemctl reload [serviceName]` *(e.g. `systemctl reload sshd.service`)*\n+ 重新加载所有已修改过的配置文件：`systemctl daemon-reload`\n\n## 开机启动\n\n对于那些支持 Systemd 的软件，安装的时候，会自动在 `/usr/lib/systemd/system` 目录添加一个配置文件。\n\n如果你想让该软件开机启动，就执行下面的命令（以 `sshd.service` 为例）。\n\n```bash\nsudo systemctl enable sshd.service\n```\n\n上面的命令相当于在 `/etc/systemd/system` 目录添加一个符号链接，指向 `/usr/lib/systemd/system` 里面的 `sshd.service` 文件。\n\n这是因为开机时，Systemd 只执行 `/etc/systemd/system` 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\n\n## Unit[^3]\n\n### 配置文件\n\n对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。\n\n{% info %}\n我曾经为 Sakura Frp 编写过一个脚本：[getfrp.sh](https://getfrp.sh) <sup>（[存档](https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213) 于 [GitHub Gist](https://gist.github.com)）</sup> ，里面便是使用了自行编写配置文件的方法。\n{% endinfo %}\n\n以 `sshd.service` 这个配置文件为例子，来分析一下 Systemd 的配置文件：\n\n```ini\n# /lib/systemd/system/ssh.service\n\n[Unit]\nDescription=OpenBSD Secure Shell server\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target auditd.service\nConditionPathExists=!/etc/ssh/sshd_not_to_be_run\n\n[Service]\nEnvironmentFile=-/etc/default/ssh\nExecStartPre=/usr/sbin/sshd -t\nExecStart=/usr/sbin/sshd -D $SSHD_OPTS\nExecReload=/usr/sbin/sshd -t\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartPreventExitStatus=255\nType=notify\nRuntimeDirectory=sshd\nRuntimeDirectoryMode=0755\n\n[Install]\nWantedBy=multi-user.target\nAlias=sshd.service\n```\n\n可以看出这个文件一共有三个部分：`[Unit]`, `[Service]` 和 `[Install]` 。\n\n配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。  \n因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 `After=`），就将该设定归零了。\n\n#### [Unit]: 启动顺序与依赖关系\n\n这个部分主要有以下几个配置项：\n\n+ `Description`: 当前服务的简易说明\n+ `Documentation`: 文档位置（以空格分隔）\n  + 该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。\n+ `Before`: 在哪些服务之前启动\n  + 本字段不涉及依赖关系，只是说明了启动顺序\n+ `After`: 在哪些服务之后启动\n  + 本字段不涉及依赖关系，只是说明了启动顺序\n  + 以 `sshd.service` 中的配置为例，该服务需要在 `network.target` 和 `auditd.service` 之后启动\n+ `Wants`: 弱依赖的服务\n  + 若被依赖的服务被停止，这个服务不需要停止\n+ `Requires`: 强依赖的服务\n  + 若被依赖的服务没有启动，则不能启动这个服务\n  + 若被依赖的服务被停止，则这个服务也必须停止\n+ `Conflicts`: 冲突的服务\n  + 如果列出的服务中有一个已经运行，那么就不能启动这个服务\n\n#### [Service]: 启动行为\n\n这个部分主要有以下几个配置项：\n\n+ `Type`: 启动类型。默认值为 `simple` ，可选值如下：\n  + `simple`: 使 `ExecStart` 项启动的项成为主进程\n  + `forking`: `ExecStart` 项将会以 `fork()` 的形式启动，此时父进程将会退出，子进程将成为主进程\n  + `oneshot`: 类似于 `simple` ，但只执行一次，Systemd 会等它执行完，才启动其他服务\n  + `dbus`: 类似于 `simple` ，但会等待 `D-Bus` 信号后启动\n  + `notify`: 类似于 `simple` ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\n  + `idle`: 类似于 `simple` ，但是要等到其他任务都执行完，才会启动该服务。\n    + 这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n    + 这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序\n+ `Environment`: 指定环境变量\n+ `EnvironmentFile`: 环境变量配置文件，该文件内部的 `key=value` 形式的配置可以在当前文件中以 `$key` 获取\n+ `ExecStart`: 服务启动时执行的命令\n+ `ExecReload`: 服务重启时执行的命令\n+ `ExecStop`: 服务停止时执行的命令\n+ `ExecStartPre`: 服务启动之前执行的命令\n+ `ExecStartPost`: 服务启动之后执行的命令\n+ `ExecStopPost`: 服务停止之后执行的命令\n+ `Restart`: 服务退出后的重启方式，默认值为 `no`\n  + `no`: 进程退出后不会重启\n  + `on-success`: 当进程正常退出时（退出状态码为 0）重启\n  + `on-failure`: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启\n  + `on-abnormal`: 当进程被信号终止或程序超时时重启\n  + `on-abort`: 当收到没有捕捉到的信号终止时重启\n  + `on-watchdog`: 当进程超时退出时重启\n  + `always`: 总是重启（不论原因）\n  + 对于守护进程，推荐设为 `on-failure`。对于那些允许发生错误退出的服务，可以设为 `on-abnormal`。\n+ `RemainAfterExit`: 退出后是否重新启动\n  + 当设定为 `RemainAfterExit=1` 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 `Type=oneshot` 的服务很有帮助\n+ `TimeoutSec`: 当这个服务在启动或停止时失败进入\"强制结束\"状态的等待秒数。\n+ `KillMode`: 定义 Systemd 如何停止这个服务，默认值为 `control-group`\n    + `control-group`: 服务停止时关闭此控制组中所有的进程\n    + `process`: 服务停止时只终止主进程（ExecStart 接的后面那串指令）\n    + `mixed`: 主进程将收到 **SIGTERM** 信号，子进程收到 **SIGKILL** 信号\n    + `none`: 没有进程会被杀掉，只是执行服务的 stop 命令\n+ `RestartSec`: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）\n\n\n所有的启动设置之前，都可以加上一个连词号 (`-`) ，表示 \"抑制错误\" ，即发生错误的时候，不影响其他命令的执行。以 `sshd.service` 为例，文件中的 `EnvironmentFile=-/etc/sysconfig/sshd`（注意等号后面的那个连词号），表示 `/etc/sysconfig/sshd` 文件不存在，也不会抛出错误。\n\n#### [Install]: 安装行为\n\n这个部分主要有以下几个配置项：\n\n+ `WantedBy`: 表示该服务所在的 Target\n  + 一般来说，服务性质的单元都是挂在 `multi-user.target` 下的\n+ `Also`: 当该服务被启用时需要同时启用的单元\n+ `Alias`: 指定创建软链接时链接至本单元配置文件的别名文件\n\n### 模板实例\n\n此处以 `getty@.service` 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：\n\n```ini\n# /lib/systemd/system/getty@.service\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Getty on %I\nDocumentation=man:agetty(8) man:systemd-getty-generator(8)\nDocumentation=http://0pointer.de/blog/projects/serial-console.html\nAfter=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\nAfter=rc-local.service\n\n# If additional gettys are spawned during boot then we should make\n# sure that this is synchronized before getty.target, even though\n# getty.target didn't actually pull it in.\nBefore=getty.target\nIgnoreOnIsolate=yes\n\n# IgnoreOnIsolate causes issues with sulogin, if someone isolates\n# rescue.target or starts rescue.service from multi-user.target or\n# graphical.target.\nConflicts=rescue.service\nBefore=rescue.service\n\n# On systems without virtual consoles, don't start any getty. Note\n# that serial gettys are covered by serial-getty@.service, not this\n# unit.\nConditionPathExists=/dev/tty0\n\n[Service]\n# the VT is cleared by TTYVTDisallocate\n# The '-o' option value tells agetty to replace 'login' arguments with an\n# option to preserve environment (-p), followed by '--' for safety, and then\n# the entered username.\nExecStart=-/sbin/agetty -o '-p -- \\\\u' --noclear %I $TERM\nType=idle\nRestart=always\nRestartSec=0\nUtmpIdentifier=%I\nTTYPath=/dev/%I\nTTYReset=yes\nTTYVHangup=yes\nTTYVTDisallocate=yes\nKillMode=process\nIgnoreSIGPIPE=no\nSendSIGHUP=yes\n\n# Unset locale for the console getty since the console has problems\n# displaying some internationalized messages.\nUnsetEnvironment=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n[Install]\nWantedBy=getty.target\nDefaultInstance=tty1\n```\n\n运行 `systemctl status getty@tty1.service` 命令，可以看到如下图所示的输出：\n\n![](https://vip1.loli.net/2021/02/11/lhw1BzOUb7TRDrq.png)\n\n不难发现图中标橙色的字符与上方配置文件中的 `%I` 相对应，并且配置文件的名称也不是 `getty@tty1.service` ，而是 `getty@.service` ，这种配置文件叫做 \"模板实例\" 。\n\n启动时只需要在 `@` 后面添加需要填入 `%I` 位置的参数即可，如 `getty@tty9.service` 。\n\n## Target\n\n一般来说，常用的 Target 有两个：一个是 `multi-user.target` ，表示多用户命令行状态；另一个是 `graphical.target` ，表示图形用户状态（它依赖于 `multi-user.target`），这一点和 SysVinit 的运行级别很是相似。\n\n官方提供了一张非常清晰的 Target 依赖关系图：\n\n![](https://vip2.loli.net/2021/02/11/ubmqlLdiGeCtUg7.png)\n\n图源：https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup\n\n### 配置文件\n\n以 `multi-user.target` 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：\n\n```ini\n# /lib/systemd/system/multi-user.target\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Multi-User System\nDocumentation=man:systemd.special(7)\nRequires=basic.target\nConflicts=rescue.service rescue.target\nAfter=basic.target rescue.service rescue.target\nAllowIsolate=yes\n```\n\n+ `Requires`: 要求于某个 Target 一起运行\n+ `Conflicts`: 冲突的 Target\n+ `After`: 在哪些 Target 之后启动\n+ `AllowIsolate`: 是否允许使用 `systemctl isolate` 命令切换到这个 Target\n\n## 参考资料\n\n[^1]: [Systemd - Wikipedia](https://en.wikipedia.org/wiki/Systemd) <sup>（[存档](https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd) 于 [互联网档案馆](https://archive.org)）</sup>  \n[^2]: [Systemd - Ubuntu Manpages](https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html) <sup>（[存档](https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html) 于 [互联网档案馆](https://archive.org)）</sup>  \n[^3]: [第十七章 认识系统服务(daemons) - 鸟哥的Linux私房菜](http://linux.vbird.org/linux_basic/0560daemons.php) <sup>（[存档](https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php) 于 [互联网档案馆](https://archive.org)）</sup>  \n\n另外，还有一些值得参考，但本文并未引用的资料：\n\n1. [systemd.unit - www.freedesktop.org](https://www.freedesktop.org/software/systemd/man/systemd.unit.html) <sup>英文</sup>\n2. [systemd.target - www.freedesktop.org](https://www.freedesktop.org/software/systemd/man/systemd.target.html) <sup>英文</sup>","tags":["Linux"]},{"title":"【题解】P2234 [HNOI2002]营业额统计","url":"//post/solution-luogu-p2234/","content":"## 题面\n\n难度：<span style=\"color: #3498DB;\">**提高+/省选-**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">SBT</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">Splay</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">概率论,统计</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">各省省选</span> <span style=\"background: #52c41a; color: #ffffff; padding: 2px 8px;\">湖南</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">2002</span>\n\n### 题目描述\n\nTiger 最近被公司升任为营业部经理，他上任后接受公司交给的第一项任务便是统计并分析公司成立以来的营业情况。\n\nTiger 拿出了公司的账本，账本上记录了公司成立以来每天的营业额。分析营业情况是一项相当复杂的工作。由于节假日，大减价或者是其他情况的时候，营业额会出现一定的波动，当然一定的波动是能够接受的，但是在某些时候营业额突变得很高或是很低，这就证明公司此时的经营状况出现了问题。经济管理学上定义了一种最小波动值来衡量这种情况：当最小波动值越大时，就说明营业情况越不稳定。\n\n而分析整个公司的从成立到现在营业情况是否稳定，只需要把每一天的最小波动值加起来就可以了。你的任务就是编写一个程序帮助 Tiger 来计算这一个值。\n\n第一天的最小波动值为第一天的营业额。\n\n$\\text{该天的最小波动值}=\\min(|\\text{该天以前某一天的营业额} - \\text{该天营业额}|)$ 。\n\n### 输入格式\n\n第一行为正整数 $n$（$n \\leq 32767$） ，表示该公司从成立一直到现在的天数，接下来的 $n$ 行每行有一个整数 $a_i$ ($|a_i| \\leq 1000000$) ，表示第 $i$ 天公司的营业额，可能存在负数。\n\n### 输出格式\n\n一个正整数，表示 $\\sum{\\text{每一天的最小波动值}}$ ，数据保证结果小于 $2^{31}$ 。\n\n### 输入输出样例\n\n**输入样例 #1**\n```text\n6\n5\n1\n2\n5\n4\n6\n```\n\n**输出样例 #1**\n```text\n12\n```\n\n**样例说明 #1**\n$$\n\\begin{aligned}\n&\\ 5+|1-5|+|2-1|+|5-5|+|4-5|+|6-5|\\\\\n=&\\ 5+4+1+0+1+1\\\\\n=&\\ 12\n\\end{aligned}\n$$\n\n## 思路\n\n由 $\\text{该天的最小波动值} = \\min(|\\text{该天以前某一天的营业额} - \\text{该天营业额}|)$ 可以判断出当前波动值与前面有关，设当天营业额为 $x$ ，则需要查找到某一天营业额 $y$ 满足 $|y-x|$ 最小。\n\n接着想到二分查找，使用 STL 库函数 `lower_bound`[^1] 和 `upper_bound`[^2] 即可完成。\n二分查找需要保证数组有序，所以边读入边处理既能保证数组有序，又可以简单地查询出该天的最小波动值。\n\n为了防止越界，开始前先向 a 中 push_back 一个满足要求的“极小值” $-1061109568$ 。\n\n时间复杂度： $O(n \\log_2 n)$ 。\n\n## 代码\n\n提交详情：[R44587104](https://www.luogu.com.cn/record/44587104)\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n, x, sum = 0;\n    vector<int> a;\n    cin >> n >> x;\n    a.push_back(0xc0c0c0c0);\n    a.push_back(x);\n    sum += x;\n    for (int i = 2; i <= n; i++) {\n        cin >> x;\n        int t1 = *--lower_bound(a.begin(), a.end(), x);\n        int t2 = *lower_bound(a.begin(), a.end(), x);\n        if (t1 == 0xc0c0c0c0) {\n            sum += abs(t2 - x);\n        } else {\n            sum += min(abs(t1 - x), abs(t2 - x));\n        }\n        a.insert(upper_bound(a.begin(), a.end(), x), x);\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n## 参考资料\n\n[^1]: [std::**lower_bound** - cppreference](https://zh.cppreference.com/w/cpp/algorithm/lower_bound)\n[^2]: [std::**upper_bound** - cppreference](https://zh.cppreference.com/w/cpp/algorithm/upper_bound)\n\n","tags":["题解"]},{"title":"【题解】S2OJ - #217 QQ空间的说说","url":"//post/solution-s2oj-217/","content":"\n## 题面\n\n题目链接：[S2OJ - #217 QQ空间的说说](https://sjzezoj.com/problem/217)\n\n难度：<span style=\"color: #bfbfbf;\">**暂无评定**</span>\n\n### 题目背景\n\n$\\text{You-Know-Who}$ 是一名有时候很菜的 $\\text{OIer}$，有时候会颓废去刷 $\\text{QQ}$ 空间。\n一天，他看到了这样的一条说说《最近很火的ABO性别测试。我是男O，你们呢？》。内容是这样的：\n\n```text\n请根据你的回答选择下一道题：\n\n1.拥有属于自己的电脑的时候，你会精心挑选？\na.显示屏 - 2   b.键盘 - 3   c.鼠标 - 4\n\n2.通常你会什么时候开始换夏装？\na.按日历节气来换 - 3   b.春天快结束的时候 - 5   c.热的不得不换衣服的时候 - 4\n\n3.自己一个人的时候，你的坐姿是？\na.双腿并拢在一起 - 6   b.双腿叉开 - 4   c.翘二郎腿 - 5\n\n4.遇到自己喜欢的人你会？\na.等待对方向自己告白 - 5   b.单恋对方 - 6   c.第一时间主动告白 - 7\n\n5.你最喜欢什么材料的衣服？\na.丝绸 - 6   b.纱料 - 7   c.布料 - 8\n\n6.自己做饭后，通常厨房什么样子？\na.乱得惨不忍睹 - 7   b.非常整洁干净 - 8   c.有一点点凌乱 - 9\n\n7.你觉得历史战争电视剧对于你来说？\na.特别帅 - 8   b.很无语 - 9   c.特别有吸引力 - 10\n\n8.每次出门的时候，你最注意的是？\na.自己是不是带了想带的东西 - 9   b.自己的味道 - 10   c.自己的发型和着装 - B\n\n9.你认为工作套装和西服给你的感觉是？\na.庄重的服饰 - D   b.过于拘谨的服饰 - E    c.美丽的服饰 - A\n\n10.如果为自己的房子选颜色的话你会选？\na.红色 - B   b.白色 - C   c.紫色 - D\n\nA型 -> 女性omega（强女性）   B型 -> 男性omega（弱女性）   C型 -> 中性beta   D型 -> 女性alpha（弱男性）   E型 -> 男性alpha（强男性）\n```\n\n反正 $\\text{You-Know-Who}$ 才不会相信这些假假的东西，于是他每次都是随机地选择一个选项，然后跳到对应的题目，继续随机地选择，直到选择出一个测试结果为止。\n\n### 题目描述\n\n我们形式化地定义一下这样类型的测试：\n+ 测试总共有 $n$ 道题；\n+ 第 $i$ 题有 $m_i$ 个选项；\n+ 第 $i$ 题的第 $j$ 个选项，要么是一个数字 $x$\n+ 要么是一个大写英文字母 $\\alpha$，表示你如果选择了这个选项，你将得到测试结果 $\\alpha$，结束测试。\n\n$\\text{Steaunk}$ 想知道对于一个给定的形如上面描述的测试，如果 $\\text{You-Know-Who}$ 一开始从第一道题开始作答，每次都是等概率随机地选择其中一个选项，然后执行对应的操作，直到得到一个大写英文字母 $\\alpha$ 表示的测试结果，结束测试，那么对于 $A \\sim Z$ 中的每一个测试结果被选中的概率是多少？\n\n### 输入格式\n\n第一行共一个正整数 $n$，表示题目的数量。\n接下来有 $n$ 行，每行第一个正整数 $m_i$ 表示第 $i$ 道题有 $m_i$ 个选项；\n接着有 $m_i$ 个由空格分开的字符串，表示选项；\n这个字符串要么可以表示为一个正整数 $x$，满足 $i &lt; x \\le n$，表示选择这个选项你会跳转到第 $x$ 题继续作答；\n要么是一个大写英文字母 $\\alpha$，表示选择这个选项，你得到测试结果 $\\alpha$，结束测试。\n\n### 输出格式\n\n一行共 $26$ 个非负整数，分别表示 $A \\sim Z$ 型被选中的概率，模 $998244353$ 后的值。\n提示：$(x,p) = 1,x^{p-1} \\equiv 1 \\pmod p$。\n\n### 输入输出样例\n\n**输入样例#1**\n```text\n3\n2 2 3\n1 A\n1 B\n```\n\n**输出样例#1**\n```text\n499122177 499122177 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n```\n\n**样例说明#1**\n显然 $\\text{You-Know-Who}$ 有 $\\frac{1}{2}$ 的概率得到测试结果 $A$，$\\frac{1}{2}$ 的概率得到测试结果 $B$，测试结果 $C\\sim Z$ 都不可能得到。\n\n### 数据规模与约定\n\n对于 $100\\%$ 的数据：$n \\le 5 \\times 10^6, \\sum_{i=1}^{n} m_i \\le 10^7$\n时间限制：$2 \\text{s}$\n空间限制：$256 \\text{MB}$\n\n## 思路\n\n记从第 $1$ 题开始作答，跳转到某一题目 $x$ 的概率为 $P(x)$，跳转到某一答案 $\\alpha$ 的概率为 $P(\\alpha)$。\n\n很容易可以得出一个初始条件 $P(1) = 1$。\n\n所求的答案即为 $P(A), P(B), P(C), \\ldots, P(Z)$ 。\n\n如果对于题目 $i$ ，设它能跳转到题目或答案 $x_1, x_2, x_3, \\ldots, x_{m_i}$，那么可以推出一个递推式：$P(x_j) \\gets P(x_j) + \\large{\\frac{p(i)}{m_i}}$ ，之后按照该式递推即可。\n\n坑点：$\\text{概率}$ 和 $\\large{\\frac{\\text{各点到达次数}}{\\text{到达次数总和}}}$ 是不一样的，要把出发点概率乘上选项的数量，并分配到每一个终点（考场上我因为不知道这个写炸了）。\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int mod = 998244353;\n\nint n, m, t, p[5000050], inv[10000005];\n\nint read() {\n    int res = 0;\n    char ch = getchar();\n    while (!isdigit(ch) && !isalpha(ch)) {\n        ch = getchar();\n    }\n    if (ch >= 'A') {\n        return ch - 64 + n;\n    }\n    while (isdigit(ch)) {\n        res = res * 10 + ch - 48;\n        ch = getchar();\n    }\n    return res;\n}\n\nlong long binpow(long long a, long long b) {\n    a %= mod;\n    long long res = 1;\n    while (b > 0) {\n        if (b & 1) res = res * a % mod;\n        a = a * a % mod;\n        b >>= 1;\n    }\n    return res;\n}\n\nint main() {\n    cin >> n;\n    p[1] = 1;\n    for (int i = 1; i <= n; i++) {\n        cin >> m;\n        if (!inv[m]) {\n            inv[m] = binpow(m, mod - 2);\n        }\n        p[i] = (long long)p[i] * inv[m] % mod;\n        for (int j = 1; j <= m; j++) {\n            t = read();\n            p[t] = (p[t] + p[i]) % mod;\n        }\n    }\n    for (int i = 1; i <= 26; i++) {\n        cout << p[n + i] << ' ';\n    }\n    cout << endl;\n    return 0;\n}\n```\n\n","tags":["题解"]},{"title":"你好，2021 | 博客迁移记录","url":"//post/hello-2021/","content":"\n再见，2020。\n\n<!-- more -->\n\n最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。\n\n## 服务器端操作\n\n### 安装 nginx\n\napt 一把梭，省时又省力。\n\n```shell\napt install nginx -y\n```\n\n### 配置 nginx\n\n简简单单配置了一下，没有什么过于复杂的东西。\n\n在申请 SSL 证书之前，不要写 HTTPS 的配置。\n\n```nginx\nserver {\n    listen      80;\n    listen      [::]:80;\n    server_name blog.baoshuo.ren;\n\n    # ACME-challenge\n    location ^~ /.well-known/acme-challenge/ {\n        allow all;\n        root /var/www/_letsencrypt;\n    }\n\n    location / {\n        return 301 https://blog.baoshuo.ren$request_uri;\n    }\n}\n```\n\n### 申请 SSL 证书\n\n由于笔者懒得每年换证书，所以就用了 [Let's Encrypt](https://letsencrypt.org/) + [acme.sh](https://acme.sh) 的组合套装来配置 SSL 。\n当然，ECC 证书也是少不了的。\n\n```bash\nacme.sh --issue -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook \"acme.sh --install-cert -d baoshuo.ren \\\n    --key-file /***/baoshuo.ren.key \\\n    --fullchain-file /***/baoshuo.ren.cer \\\n    --reloadcmd \\\"service nginx force-reload\\\"\"\nacme.sh --issue --keylength ec-256 \\\n    -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook \"acme.sh --install-cert -d baoshuo.ren --ecc \\\n    --key-file /***/baoshuo.ren.ecc.key \\\n    --fullchain-file /***/baoshuo.ren.ecc.cer \\\n    --reloadcmd \\\"service nginx force-reload\\\"\"\n```\n\n申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：\n\n```nginx\nserver {\n    listen                               443 ssl http2;\n    listen                               [::]:443 ssl http2;\n    server_name                          blog.baoshuo.ren;\n    root                                 /var/www/blog/;\n\n    # SSL\n    ssl_certificate                      /***/baoshuo.ren.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.key;\n    ssl_certificate                      /***/baoshuo.ren.ecc.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.ecc.key;\n    ssl_protocols                        TLSv1.2 TLSv1.3;\n    ssl_ciphers                          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security 'max-age=31536000';\n\n    # logging\n    error_log                            /var/log/nginx/blog.baoshuo.ren.error.log warn;\n\n    # 404 page\n    error_page                           404 /404.html;\n}\n```\n\n上方使用的 SSL 配置是 Mozilla 推荐的现代化配置[^1] ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置[^2] ：\n\n```\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;\nssl_prefer_server_ciphers on;\n```\n\n## 将博客文件同步到服务器上\n\n在 `.github/workflows` 目录下创建一个 `server.yml` 文件，写入以下内容：\n\n```yaml\nname: Deploy blog to Server\n\non:\n  push:\n    branches: [ master ]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Deploy\n        uses: easingthemes/ssh-deploy@v2.1.5\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n          ARGS: \"-avz --delete  --exclude '.git/*' --exclude '.github/*' --exclude '.gitlab-ci.yml' --exclude '.nojekyll'\"\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\n          REMOTE_USER: ${{ secrets.REMOTE_USER }}\n          TARGET: ${{ secrets.TARGET }}\n```\n\n之后在 `https://github.com/{username}/{repo}/settings/secrets/actions` 中添加四个 Secrets 。\n\n| 名称             | 内容                  |\n| --------------- | --------------------- |\n| REMOTE_HOST     | 服务器 IP 地址         |\n| REMOTE_USER     | 服务器用户名           |\n| SSH_PRIVATE_KEY | 连接到服务器的 SSH 私钥 |\n| TARGET          | 存放文件的路径          |\n\n将博客文件 push 到仓库中，就能在服务器上查看到文件了。\n\n## 参考资料\n\n[^1]: [nginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator](https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=modern&openssl=1.1.1f&ocsp=false&guideline=5.6)\n[^2]: [nginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator](https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=intermediate&openssl=1.1.1f&ocsp=false&guideline=5.6)\n","tags":["折腾"]},{"title":"【题解】P3879 [TJOI2010] 阅读理解","url":"//post/solution-luogu-p3879/","content":"## 题面\n\n难度：<span style=\"color: #3498DB;\">**提高+/省选-**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">字符串</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">哈希</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">概率论,统计</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">字典树,Trie树</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">各省省选</span> <span style=\"background: #52c41a; color: #ffffff; padding: 2px 8px;\">天津</span> <span style=\"background: #f39c11; color: #ffffff; padding: 2px 8px;\">高性能</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">2010</span>\n\n### 题目描述\n\n英语老师留了 $N$ 篇阅读理解作业，但是每篇英文短文都有很多生词需要查字典，为了节约时间，现在要做个统计，算一算某些生词都在哪几篇短文中出现过。\n\n### 输入格式\n\n第一行为整数 $N$ ，表示短文篇数，其中每篇短文只含空格和小写字母。\n\n按下来的 $N$ 行，每行描述一篇短文。每行的开头是一个整数 $L$ ，表示这篇短文由 $L$ 个单词组成。接下来是 $L$ 个单词，单词之间用一个空格分隔。\n\n然后为一个整数 $M$ ，表示要做几次询问。后面有 $M$ 行，每行表示一个要统计的生词。\n\n### 输出格式\n\n对于每个生词输出一行，统计其在哪几篇短文中出现过，并按从小到大输出短文的序号，序号不应有重复，序号之间用一个空格隔开（注意第一个序号的前面和最后一个序号的后面不应有空格）。如果该单词一直没出现过，则输出一个空行。\n\n### 输入输出样例\n\n**输入 #1**\n\n```text\n3\n9 you are a good boy ha ha o yeah\n13 o my god you like bleach naruto one piece and so do i\n11 but i do not think you will get all the points\n5\nyou\ni\no\nall\nnaruto\n```\n\n**输出 #1**\n```text\n1 2 3\n2 3\n1 2\n3\n2\n```\n            \n### 说明\n\n对于 $30\\%$ 的数据， $1\\le M\\le 10^3$ 。\n\n对于 $100\\%$ 的数据，$1\\le M\\le 10^4$，$1\\le N\\le 10^3$ 。\n\n每篇短文长度（含相邻单词之间的空格）$\\le 5\\times 10^3$ 字符，每个单词长度 $\\le 20$ 字符。\n\n每个测试点时限 $2$ 秒。\n\n## 思路\n\n开一个 map 来存单词与文章之间的对应关系，使用 set 去重。\n\n每次检索的时候先使用 `m.count(s)`<sup>[1]</sup> 判断是否存在该单词（防止创建无用元素浪费内存），如果不存在就输出**空行**。\n\n一些坑点：\n1. 输出时行尾如果有多余空格会 WA 。\n2. 判断是否为末尾的前一个数时不能用 `it + 1 != m[s].end()` ，应该用 `it != --m[s].end()` ，否则会报错 `no match for ‘operator+’ (operand types are ‘std::set<int>::iterator’ {aka ‘std::_Rb_tree_const_iterator<int>’} and ‘int’)`。\n\n## 速度优化\n\n+ 可以将 `map` 替换为 `unordered_map` ，速度快了许多（[1057ms](https://www.luogu.com.cn/record/44435133) -> [593ms](https://www.luogu.com.cn/record/44435160)）\n   在 cppreference.com 上可以查到： unordered_map 的时间复杂度平均情况下为常数，最坏情况下则与大小成线性<sup>[2][3]</sup>；map 的时间复杂度与容器大小成对数<sup>[4][5]</sup>。\n+ 可以使用更快的输入输出方式，如 `scanf` `printf` 或自己的快读快写。\n\n\n## 代码\n\n也可在 [GitHub](https://github.com/renbaoshuo/luogu/blob/master/problem/P3879/P3879.cpp) 上查看最新更新。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n, l;\n    string s;\n    map<string, set<int>> m;\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        cin >> l;\n        for (int j = 0; j < l; j++) {\n            cin >> s;\n            m[s].insert(i);\n        }\n    }\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> s;\n        if (!m.count(s)) {\n            cout << endl;\n        }\n        else {\n            for (set<int>::iterator it = m[s].begin(); it != --m[s].end(); it++) {\n                cout << *it << ' ';\n            }\n            cout << *--m[s].end() << endl;\n        }\n    }\n    return 0;\n}\n```\n\n## 参考资料\n\n[1] [std::map<Key,T,Compare,Allocator>::**count** - cppreference](https://zh.cppreference.com/w/cpp/container/map/count)\n[2] [std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::**operator[]** - cppreference](https://zh.cppreference.com/w/cpp/container/unordered_map/operator_at)\n[3] [std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::**count** - cppreference](https://zh.cppreference.com/w/cpp/container/unordered_map/count)\n[4] [std::map<Key,T,Compare,Allocator>::**operator[]** - cppreference](https://zh.cppreference.com/w/cpp/container/map/operator_at)\n[5] [std::map<Key,T,Compare,Allocator>::**count** - cppreference](https://zh.cppreference.com/w/cpp/container/map/count)\n","tags":["题解"]},{"title":"NOIP 2020 游记 & 题解","url":"//post/solution-noip-2020/","content":"没想到初中生也能参加 NOIP 。\n\n<!-- more -->\n\n+ [题解](#题解：排水系统（water）)\n\n## 游记\n\n没啥好写的。\n\n![](https://vip2.loli.net/2020/12/13/5ePKrZ7Oy8Lj6fc.jpg)\n\n▲  $\\text{y\\color{red}{ouwike}}$ 在考前立的 $flag$\n\n可惜 $\\text{y\\color{red}{ouwike}}$ 最后还是没上二百。\n\n周五下午的火车，赶到秦皇岛，晚上写了几个板子就开始颓废，一直颓废到12点。\n\n中间还开了会，发了选手胸牌、讲了一些注意事项。\n\n![](https://vip1.loli.net/2020/12/05/fRagTOlMvx3Gn6B.jpg)\n\n▲ 选手胸牌长这样\n\n![](https://vip1.loli.net/2020/12/05/NQ4JYSWf5cXt3U6.jpg)\n\n▲ 早上还照了一张合照\n\n比完赛拿上行李就坐火车回石家庄了。\n\n## 题解：排水系统（water）\n\n### 题目描述\n\n对于一个城市来说，排水系统是极其重要的一个部分。\n\n有一天，小 C 拿到了某座城市排水系统的设计图。排水系统由 $n$ 个排水结点（它们从 $1 \\sim n$ 编号）和若干个单向排水管道构成。每一个排水结点有若干个管道用于汇集其他排水结点的污水（简称为该结点的汇集管道），也有若干个管道向其他的排水结点排出污水（简称为该结点的排出管道）。\n\n排水系统的结点中有 $m$ 个污水接收口，它们的编号分别为 $1, 2, \\ldots , m$，污水只能从这些接收口流入排水系统，并且这些结点没有汇集管道。排水系统中还有若干个最终排水口，它们将污水运送到污水处理厂，没有排出管道的结点便可视为一个最终排水口。\n\n现在各个污水接收口分别都接收了 $1$ 吨污水，污水进入每个结点后，会均等地从当前结点的每一个排出管道流向其他排水结点，而最终排水口将把污水排出系统。\n\n现在小 C 想知道，在该城市的排水系统中，每个最终排水口会排出多少污水。该城市的排水系统设计科学，管道不会形成回路，即不会发生污水形成环流的情况。\n\n### 输入格式\n\n第一个两个用单个空格分隔的整数 $n, m$。分别表示排水结点数与接收口数量。  \n\n接下来 $n$ 行，第 $i$ 行用于描述结点 $i$ 的所有排出管道。其中每行第一个整数 $d_i$ 表示其排出管道的数量，接下来 $d_i$ 个用单个空格分隔的整数 $a_1, a_2, \\ldots , a_{d_i}$ 依次表示管道的目标排水结点。  \n\n保证不会出现两条起始结点与目标结点均相同的管道。\n\n### 输出格式\n\n输出若干行，按照编号从小到大的顺序，给出每个最终排水口排出的污水体积。其中体积使用分数形式进行输出，即每行输出两个用单个空格分隔的整数 $p$，$q$，表示排出的污水体积为 $\\frac{p}{q}$。要求 $p$ 与 $q$ 互素，$q = 1$ 时也需要输出 $q$。\n\n### 输入输出样例\n\n**输入**\n\n```text\n5 1\n3 2 3 5\n2 4 5\n2 5 4\n0\n0\n```\n\n**输出**\n\n```text\n1 3\n2 3\n```\n\n**解释**\n\n$1$ 号结点是接收口，$4, 5$ 号结点没有排出管道，因此是最终排水口。  \n$1$ 吨污水流入 $1$ 号结点后，均等地流向 $2, 3, 5$ 号结点，三个结点各流入 $\\frac{1}{3}$ 吨污水。  \n$2$ 号结点流入的 $\\frac{1}{3}$ 吨污水将均等地流向 $4, 5$ 号结点，两结点各流入 $\\frac{1}{6}$ 吨污水。  \n$3$ 号结点流入的 $\\frac{1}{3}$ 吨污水将均等地流向 $4, 5$ 号结点，两结点各流入 $\\frac{1}{6}$ 吨污水。  \n最终，$4$ 号结点排出 $\\frac{1}{6} + \\frac{1}{6} = \\frac{1}{3}$ 吨污水，$5$ 号结点排出 $\\frac{1}{3} + \\frac{1}{6} + \\frac{1}{6} = \\frac{2}{3}$ 吨污水。\n\n### 数据范围\n\n| 测试点编号 | $n \\le$ | $m \\le$ |\n|:-:|:-:|:-:|\n| $1 \\sim 3$ | $10$ | $1$ |\n| $4 \\sim 6$ | ${10}^3$ | $1$ |\n| $7 \\sim 8$ | ${10}^5$ | $1$ |\n| $9 \\sim 10$ | ${10}^5$ | $10$ |\n\n对于全部的测试点，保证 $1 \\le n \\le {10}^5$，$1 \\le m \\le 10$，$0 \\le d_i \\le 5$。\n\n数据保证，污水在从一个接收口流向一个最终排水口的过程中，不会经过超过 $10$ 个中间排水结点（即接收口和最终排水口不算在内）。\n\n### 思路\n\n从 $1 \\sim m$ 节点开始向下搜索，如果搜到没有排水口的节点就更新节点的 $ans$ 。\n\n![P7113 Sample1](https://vip2.loli.net/2020/12/06/SC9qw1QU47B8Zxi.png)\n\n▲ 样例1的搜索过程\n\n需要注意的分子和分母需要单独存，不能使用浮点型存储，否则会有精度问题。\n\n在均分的时候只需要将分母除以节点数即可，如下方所示：\n\n$$\n\\begin{aligned}\n&\\frac{2}{3} \\div 4 \\\\\n=& \\frac{2}{3} \\times \\frac{1}{4} \\\\\n=& \\frac{2}{3 \\times 4}\\\\ \n=& \\frac{2}{12}\n=& \\frac{1}{6}\n\\end{aligned}\n$$\n\n在相加的时候可以这样做：\n\n$$\n\\begin{aligned}\n&\\frac{2}{3} + \\frac{3}{4} \\\\\n=& \\frac{2 \\times 4}{3 \\times 4} + \\frac{3\\times 3}{3 \\times 4}\\\\ \n=& \\frac{2 \\times 4 + 3 \\times 4}{3\\times 4}\\\\\n=& \\frac{20}{12}\\\\\n=& \\frac{5}{3}\n\\end{aligned}\n$$\n\n赛场AC用时：1小时。\n\n别忘了开 `long long` 。\n\n### 代码\n\n<details>\n<summary>考场代码：OI题库100分，洛谷90分，官方数据80分</summary>\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, d, t;\nvector<int> u[100005];\npair<long long, long long> ans[100005];\n\nlong long gcd(long long a, long long b) {\n    if(b == 0) return a;\n    return gcd(b, a%b);\n}\n\nvoid dfs(int x, long long first, long long second) {\n    if(u[x].empty()) {\n        if(ans[x].first && ans[x].second) {\n            if(ans[x].second == second) {\n                ans[x].first += first;\n                long long tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            }\n            else {\n                first *= ans[x].second;\n                ans[x].first *= second;\n                ans[x].first += first;\n                ans[x].second *= second;\n                long long tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            }\n        }\n        else {\n            ans[x].first = first;\n            ans[x].second = second;\n        }\n        return;\n    }\n    int s = u[x].size();\n    second *= s;\n    for(int i = 0 ; i < s; i++) {\n        dfs(u[x][i], first, second);\n    }\n}\n\nint main() {\n    cin >> n >> m;\n    for(int i = 1 ; i <= n ; i++) {\n        cin >> d;\n        for(int j = 1 ; j <= d ; j++) {\n            cin >> t;\n            u[i].push_back(t);\n        }\n    }\n    for(int i = 1 ; i <= m ; i++) {\n        dfs(i, 1, 1);\n    }\n    for(int i = 1 ; i <= n ; i++) {\n        if(u[i].empty()) {\n            cout << ans[i].first << ' ' << ans[i].second << endl;\n        }\n    }\n    return 0;\n}\n```\n\n</details>\n<hr>\n<details open>\n<summary>AC代码</summary>\n\n考后第二天就用 `__int128` 水过了这道题（懒得打高精）。\n\n使用流输出 `__int128` 的时候还糊了个输出函数（因为没内置）。\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, d, t;\nvector<int> u[100005];\npair<__int128, __int128> ans[100005];\n\nostream& operator<<(ostream &__ostream, __int128 __n) {\n    string __o;\n    while (__n) {\n        __o.push_back(__n%10+'0');\n        __n /= 10;\n    }\n    reverse(__o.begin(), __o.end());\n    return __ostream << __o;\n}\n\n__int128 gcd(__int128 a, __int128 b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\nvoid dfs(int x, __int128 first, __int128 second) {\n    if (u[x].empty()) {\n        if (ans[x].first && ans[x].second) {\n            if (ans[x].second == second) {\n                ans[x].first += first;\n                __int128 tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            }\n            else {\n                first *= ans[x].second;\n                ans[x].first *= second;\n                ans[x].first += first;\n                ans[x].second *= second;\n                __int128 tmp = gcd(ans[x].first, ans[x].second);\n                ans[x].first /= tmp;\n                ans[x].second /= tmp;\n            }\n        }\n        else {\n            ans[x].first = first;\n            ans[x].second = second;\n        }\n        return;\n    }\n    int s = u[x].size();\n    second *= s;\n    for (int i = 0; i < s; i++) {\n        dfs(u[x][i], first, second);\n    }\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        cin >> d;\n        for (int j = 1; j <= d; j++) {\n            cin >> t;\n            u[i].push_back(t);\n        }\n    }\n    for (int i = 1; i <= m; i++) {\n        dfs(i, 1, 1);\n    }\n    for (int i = 1; i <= n; i++) {\n        if (u[i].empty()) {\n            cout << ans[i].first << ' ' << ans[i].second << endl;\n        }\n    }\n    return 0;\n}\n```\n\n</details>\n\n\n","tags":["题解","OI","游记"]},{"title":"线段树学习笔记","url":"//post/segment-tree/","content":"\n线段树（Segment Tree）是一种用来维护区间的数据结构。\n\n<!-- more -->\n\n与树状数组相比，线段树可以实现时间复杂度在 $O(\\log n)$ 级别的区间修改，还可以同时支持多种操作（加、乘、最值等）。\n\n## 操作列表\n\n+ 上传（pushup）\n+ 建树（build）\n+ 下放懒标记（pushdown）\n+ 区间查询（query）\n+ 区间修改（modify）\n\n## 通用操作\n\n### 存储线段树\n\n线段树是一个典型的二叉树，因此我们可以使用一个数组来存储线段树。\n\n分析：很容易就知道线段树的深度为 $\\lceil\\log n\\rceil$ ，可得线段树的节点个数为 $2^{\\left\\lceil\\log{n}\\right\\rceil+1}-1$，粗略估计开大小为 $4n$ 的数组即可（可以使用位运算写成 `n << 2`）。\n\n```cpp\nstruct node {\n    int l, r;\n    long long s, d;\n\n    node() {\n        l = r = s = d = 0;\n    }\n    node(int _l, int _r) {\n        l = _l;\n        r = _r;\n        s = d = 0;\n    }\n} tr[100005 << 2];\n```\n\n| 变量名 | 用途 |\n| ----- | ----- |\n| l | 区间的左端点 |\n| r | 区间的右端点 |\n| s | 区间和 |\n| d | 懒标记 |\n\n\n### 上传（pushup）\n\n之所以把上传放在建树前面说，是因为建树的时候要用到它。\n\n```cpp\n/**\n * 上传信息\n * @param u 父节点下标\n */\ninline void pushup(int u) {\n    tr[u].s = tr[u << 1].s + tr[u << 1 | 1].s;\n}\n```\n\n将两个子节点所代表的区间的和相加即为父区间的和。\n\n### 建树（build）\n\n```cpp\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) {\n    tr[u] = node(l, r);\n    if (l == r) {\n        tr[u].s = a[l];\n        return;\n    }\n    int mid = l + r >> 1;\n    build(u << 1, l, mid);\n    build(u << 1 | 1, mid + 1, r);\n    pushup(u);\n}\n```\n\n先初始化当前区间，接下来分两种情况：\n\n1. 若当前区间长度等于 $1\\ \\ (l = r)$ ，则直接将当前区间的区间和赋值为 `a[l]` 即可。\n2. 若当前区间长度大于 $1\\ \\ (l < r)$ ，则将区间平均分成两部分（即从 $\\lfloor(l+r)/2\\rfloor$ 处断开分为两个区间，可写作 `l + r >> 1`），继续向下递归建立左右子树即可。\n\n需要注意的是两个子区间没有交集，因此左子树的左端点是 $l$ 、右端点是 $mid$ ，右子树的左端点是 $mid+1$ 、右端点是 $r$ 。\n\n### 区间查询（query）\n\n```cpp\n/**\n * 区间查询\n * @param u 父节点\n * @param l 左端点\n * @param r 右端点\n */\nlong long query(int u, int l, int r) {\n    if (tr[u].l >= l && tr[u].r <= r) {  // 被包含直接返回当前区间和\n        return tr[u].s;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    long long s = 0;\n    pushdown(u);                                // 下放懒标记\n    if (l <= mid) s += query(u << 1, l, r);     // 和左侧有交集\n    if (r > mid) s += query(u << 1 | 1, l, r);  // 和右侧有交集\n    return s;\n}\n```\n\n1. 如果这个区间被包含，直接返回该区间的和。\n2. 如果和左儿子区间有交集，则继续向左儿子区间递归查询。\n3. 如果和右儿子区间有交集，则继续向右儿子区间递归查询。\n\n需要注意的是在递归查询左右儿子区间之前要先下放懒标记（pushdown），否则会出问题。\n\n## 区间加\n\n本部分以 [洛谷 P3372 【模板】线段树 1](https://www.luogu.com.cn/problem/P3372) 为例子来简述一下线段树区间加的实现。\n\n### 下放懒标记（pushdown）\n\n```cpp\n/**\n * 下放懒标记\n * @param u 父节点下标\n */\ninline void pushdown(int u) {\n    if (!tr[u].d) return;\n    // 处理左子树\n    tr[u << 1].d += tr[u].d;\n    tr[u << 1].s += (tr[u << 1].r - tr[u << 1].l + 1) * tr[u].d;\n    // 处理右子树\n    tr[u << 1 | 1].d += tr[u].d;\n    tr[u << 1 | 1].s += (tr[u << 1 | 1].r - tr[u << 1 | 1].l + 1) * tr[u].d;\n    // 清除懒标记\n    tr[u].d = 0;\n}\n```\n\n这部分代码其实很简单。\n\n将左、右子树的懒标记加上父节点的懒标记，区间和加上 $(r - l + 1)\\times d$ （$r, l$ 分别表示儿子区间的左、右端点，$d$表示父节点的懒标记），最后清空父节点的懒标记即可。\n\n### 区间修改（modify）\n\n```cpp\n/**\n * 区间修改\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, int d) {\n    if (tr[u].l >= l && tr[u].r <= r) {  // 被包含直接修改\n        tr[u].d += d;\n        tr[u].s += (tr[u].r - tr[u].l + 1) * d;\n        return;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    pushdown(u);                               // 下放懒标记\n    if (l <= mid) modify(u << 1, l, r, d);     // 和左侧有交集\n    if (r > mid) modify(u << 1 | 1, l, r, d);  // 和右侧有交集\n    pushup(u);                                 // 上传新信息\n}\n```\n\n区间修改和区间查询的实现相似。\n\n1. 如果当前区间被包含，直接添加懒标记并修改区间和。\n2. 如果和左儿子区间有交集，则继续向左儿子区间递归修改。\n3. 如果和右儿子区间有交集，则继续向右儿子区间递归修改。\n\n需要注意的是在递归修改左右儿子区间之前要先下放懒标记（pushdown），修改完成以后要上传新信息（pushup），否则会出问题。\n\n## 区间加、乘\n\n本部分以 [洛谷 P3373 【模板】线段树 2](https://www.luogu.com.cn/problem/P3373) 为例子来简述一下线段树区间加、乘的实现。\n\n在编写之前，结构体中需要先添加一个乘法的懒标记 `x` ，并将其赋初值为 $1$ ，修改之后的结构体如下所示。\n\n```cpp\nstruct node {\n    int l, r;\n    long long s, d, x;\n\n    node() {\n        l = r = s = d = 0;\n        x = 1;\n    }\n    node(int _l, int _r) {\n        l = _l, r = _r;\n        s = d = 0;\n        x = 1;\n    }\n} tr[100005 << 2];\n```\n\n### 下放懒标记（pushdown）\n\n```cpp\n/**\n * 下放懒标记\n * @param u 父节点下标\n * @attention 先乘后加\n */\nvoid pushdown(int u) {\n    // 左子树\n    tr[u << 1].s = ((tr[u << 1].s * tr[u].x) + (tr[u << 1].r - tr[u << 1].l + 1) * tr[u].d) % p;\n    tr[u << 1].x = tr[u << 1].x * tr[u].x % p;\n    tr[u << 1].d = (tr[u << 1].d * tr[u].x + tr[u].d) % p;\n    // 右子树\n    tr[u << 1 | 1].s = ((tr[u << 1 | 1].s * tr[u].x) + (tr[u << 1 | 1].r - tr[u << 1 | 1].l + 1) * tr[u].d) % p;\n    tr[u << 1 | 1].x = tr[u << 1 | 1].x * tr[u].x % p;\n    tr[u << 1 | 1].d = (tr[u << 1 | 1].d * tr[u].x + tr[u].d) % p;\n    // 清除懒标记\n    tr[u].d = 0;\n    tr[u].x = 1;\n}\n```\n\n此处遵循**先乘后加**的原则，先修改区间和，再修改乘法懒标记，最后修改加法懒标记，不要忘记 $\\bmod\\ p$。\n\n注意：此处清除懒标记的时候，乘法懒标记应修改为 $1$ 。\n\n### 区间修改（modify）\n\n```cpp\n/**\n * 区间修改\n * @details 修改区间 [l, r] 中的每一个数\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param x 乘上的数\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, long long x, long long d) {\n    // 被包含直接修改\n    if (tr[u].l >= l && tr[u].r <= r) {\n        tr[u].s = ((tr[u].s * x) + (tr[u].r - tr[u].l + 1) * d) % p;\n        tr[u].x = tr[u].x * x % p;\n        tr[u].d = (tr[u].d * x + d) % p;\n        return;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    pushdown(u);                                  // 下放懒标记\n    if (l <= mid) modify(u << 1, l, r, x, d);     // 和左侧有交集\n    if (r > mid) modify(u << 1 | 1, l, r, x, d);  // 和右侧有交集\n    pushup(u);                                    // 上传新信息\n}\n```\n\n大体上和加法的修改函数一样，而在修改时与下放懒标记做法相同，遵循**先乘后加**的原则。\n\n调用的时候若只需要使用乘法部分，加数设置为 $0$ 即可。若只需要使用加法部分，乘数设置为 $1$ 即可。\n\n## 全部代码\n\n到这里基本操作就说完了，下面是全部的 AC 代码。\n\n### 区间加\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n/**\n * 线段树节点\n */\nstruct node {\n    int l, r;\n    long long s, d;\n\n    node() {\n        l = r = s = d = 0;\n    }\n    node(int _l, int _r) {\n        l = _l;\n        r = _r;\n        s = d = 0;\n    }\n} tr[100005 << 2];\nint n, m, op, x, y, k, a[100005];\n\n/**\n * 上传区间和\n * @param u 父节点下标\n */\nvoid pushup(int u) {\n    tr[u].s = tr[u << 1].s + tr[u << 1 | 1].s;\n}\n\n/**\n * 下放懒标记\n * @param u 父节点下标\n */\nvoid pushdown(int u) {\n    if (!tr[u].d) return;\n    // 处理左子树\n    tr[u << 1].d += tr[u].d;\n    tr[u << 1].s += (tr[u << 1].r - tr[u << 1].l + 1) * tr[u].d;\n    // 处理右子树\n    tr[u << 1 | 1].d += tr[u].d;\n    tr[u << 1 | 1].s += (tr[u << 1 | 1].r - tr[u << 1 | 1].l + 1) * tr[u].d;\n    // 清除懒标记\n    tr[u].d = 0;\n}\n\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) {\n    tr[u] = node(l, r);\n    if (l == r) {\n        tr[u].s = a[l];\n        return;\n    }\n    int mid = l + r >> 1;\n    build(u << 1, l, mid);\n    build(u << 1 | 1, mid + 1, r);\n    pushup(u);\n}\n\n/**\n * 区间修改\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, int d) {\n    if (tr[u].l >= l && tr[u].r <= r) {  // 被包含直接修改\n        tr[u].d += d;\n        tr[u].s += (tr[u].r - tr[u].l + 1) * d;\n        return;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    pushdown(u);                               // 下放懒标记\n    if (l <= mid) modify(u << 1, l, r, d);     // 和左侧有交集\n    if (r > mid) modify(u << 1 | 1, l, r, d);  // 和右侧有交集\n    pushup(u);                                 // 上传新信息\n}\n\n/**\n * 区间查询\n * @param u 父节点\n * @param l 左端点\n * @param r 右端点\n */\nlong long query(int u, int l, int r) {\n    if (tr[u].l >= l && tr[u].r <= r) {  // 被包含直接返回\n        return tr[u].s;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    long long s = 0;\n    pushdown(u);                                // 下放懒标记\n    if (l <= mid) s += query(u << 1, l, r);     // 和左侧有交集\n    if (r > mid) s += query(u << 1 | 1, l, r);  // 和右侧有交集\n    return s;\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    build(1, 1, n);\n    for (int i = 0; i < m; i++) {\n        cin >> op >> x >> y;\n        if (op == 1) {\n            cin >> k;\n            modify(1, x, y, k);\n        }\n        else if (op == 2) {\n            cout << query(1, x, y) << endl;\n        }\n    }\n    return 0;\n}\n```\n\n### 区间加、乘\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node {\n    int l, r;\n    long long s, d, x;\n\n    node() {\n        l = r = s = d = 0;\n        x = 1;\n    }\n    node(int _l, int _r) {\n        l = _l, r = _r;\n        s = d = 0;\n        x = 1;\n    }\n} tr[100005 << 2];\nint n, m, p, op, x, y;\nlong long k, a[100005];\n\n/**\n * 上传信息\n * @param u 父节点下标\n */\nvoid pushup(int u) {\n    tr[u].s = (tr[u << 1].s + tr[u << 1 | 1].s) % p;\n}\n\n/**\n * 下放懒标记\n * @param u 父节点下标\n * @attention 先乘后加\n */\nvoid pushdown(int u) {\n    // 左子树\n    tr[u << 1].s = ((tr[u << 1].s * tr[u].x) + (tr[u << 1].r - tr[u << 1].l + 1) * tr[u].d) % p;\n    tr[u << 1].x = tr[u << 1].x * tr[u].x % p;\n    tr[u << 1].d = (tr[u << 1].d * tr[u].x + tr[u].d) % p;\n    // 右子树\n    tr[u << 1 | 1].s = ((tr[u << 1 | 1].s * tr[u].x) + (tr[u << 1 | 1].r - tr[u << 1 | 1].l + 1) * tr[u].d) % p;\n    tr[u << 1 | 1].x = tr[u << 1 | 1].x * tr[u].x % p;\n    tr[u << 1 | 1].d = (tr[u << 1 | 1].d * tr[u].x + tr[u].d) % p;\n    // 清除懒标记\n    tr[u].d = 0;\n    tr[u].x = 1;\n}\n\n/**\n * 建立线段树\n * @param u 根节点下标\n * @param l 左端点\n * @param r 右端点\n */\nvoid build(int u, int l, int r) {\n    tr[u] = node(l, r);\n    if (l == r) {\n        tr[u].s = a[l] % p;\n        return;\n    }\n    int mid = l + r >> 1;\n    build(u << 1, l, mid);\n    build(u << 1 | 1, mid + 1, r);\n    pushup(u);\n}\n\n/**\n * 区间修改\n * @details 将区间 [l, r] 中的每一个数加上 d\n * @param u 父节点下标\n * @param l 左端点\n * @param r 右端点\n * @param x 乘上的数\n * @param d 增加的值\n */\nvoid modify(int u, int l, int r, long long x, long long d) {\n    // 被包含直接修改\n    if (tr[u].l >= l && tr[u].r <= r) {\n        tr[u].s = ((tr[u].s * x) + (tr[u].r - tr[u].l + 1) * d) % p;\n        tr[u].x = tr[u].x * x % p;\n        tr[u].d = (tr[u].d * x + d) % p;\n        return;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    pushdown(u);                                  // 下放懒标记\n    if (l <= mid) modify(u << 1, l, r, x, d);     // 和左侧有交集\n    if (r > mid) modify(u << 1 | 1, l, r, x, d);  // 和右侧有交集\n    pushup(u);                                    // 上传新信息\n}\n\n/**\n * 区间查询\n * @param u \n * @param l \n * @param r \n * @return int \n */\nlong long query(int u, int l, int r) {\n    if (tr[u].l >= l && tr[u].r <= r) {  // 被包含直接返回\n        return tr[u].s;\n    }\n    int mid = tr[u].l + tr[u].r >> 1;\n    long long s = 0;\n    pushdown(u);                                         // 下放懒标记\n    if (l <= mid) s = query(u << 1, l, r);               // 和左侧有交集\n    if (r > mid) s = (s + query(u << 1 | 1, l, r)) % p;  // 和右侧有交集\n    return s;\n}\n\nint main() {\n    cin >> n >> m >> p;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    build(1, 1, n);\n    while (m--) {\n        cin >> op >> x >> y;\n        if (op == 1) {\n            cin >> k;\n            modify(1, x, y, k, 0);\n        }\n        else if (op == 2) {\n            cin >> k;\n            modify(1, x, y, 1, k);\n        }\n        else if (op == 3) {\n            cout << query(1, x, y) % p << endl;\n        }\n    }\n    return 0;\n}\n```\n","tags":["OI","笔记"]},{"title":"【随笔】下载自己在 SM.MS 图床上的所有图片","url":"//post/download-smms-image/","content":"前提条件：有 SM.MS 图床账号，并且图片存储在该账号下。\n\n思路：先请求API，获取图片列表。遍历列表，判断本地是否存在该图片，若不存在则下载该图片。\n\n代码如下。\n\n```python\nimport requests\nimport os\nimport json\nimport pathlib\nimport sys\n\ndef getUploadedImages(token) -> str:\n    url = \"https://sm.ms/api/v2/upload_history\"\n    headers = {\"Authorization\": token}\n    return requests.get(url, headers=headers).text\n\ndata = json.loads(getUploadedImages(sys.argv[1]))\n\nfor img in data[\"data\"]:\n    path = \"./data/\" + img[\"storename\"]\n    if not pathlib.Path(path).is_file():\n        pic = requests.get(img[\"url\"]).content\n        f = open(path, \"wb\")\n        f.write(pic)\n        f.close()\n        del pic\n        print(\"Successfully get \"+img[\"storename\"]+\" .\")\n    else:\n        print(\"\"+img[\"storename\"]+\" is already exists.\")\n```\n\n使用方法：`python3 smms-image.py \"[your token here]\"`\n\n下载下来的图片会存到 `./data/` 目录下（请提前新建）。","tags":["随笔"]},{"title":"洛谷爬虫","url":"//post/luogu-spider/","content":"\n截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。\n\n<!-- more -->\n\n本次爬取遵守洛谷的 `robots.txt` 中的要求，不爬取提交记录页面。为了避免影响洛谷的正常运行，脚本只采用单线程进行爬取。\n\n```\nUser-Agent: *\nDisallow: /record\nDisallow: /recordnew\n```\n\n## 爬取题目信息\n\n### 题目数据获取\n\n先使用 `curl` 获取洛谷的题目页面：\n\n![](https://vip1.loli.net/2020/11/26/JageUdcpXTthIjM.png)\n\n可以看出我们需要的数据都在传入给 `decodeURIComponent()` 函数的字符串中，正则匹配取出即可。\n\n下面是代码实现：\n\n```python\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\n# 设置请求头\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 Spider/0.1\"\n}\n\ndef getProblemJSON(pid):\n    return json.loads(unquote(str(re.findall(r'decodeURIComponent\\(\"(.*)\"\\)', requests.get(url=\"https://www.luogu.com.cn/problem/P1000\", headers=headers).text)[0])))\n\ndata = getProblemJSON(\"P1000\")\nprint(json.dumps(data['currentData'], sort_keys=True, indent=4))\n```\n\n{% warn Update at 2021/02/05 %}\n添加参数 `_contentOnly=1` 可以直接获取JSON格式的信息，无需再正则匹配。\n\n```diff\n--- a/tools/spider.py\n+++ b/tools/spider.py\n@@ -19,8 +19,7 @@\n def getProblem(pid):\n-    url = f\"https://www.luogu.com.cn/problem/{pid}\"\n-    redata = re.findall(r'decodeURIComponent\\(\"(.*)\"\\)',\n-                        requests.get(url, headers=headers).text)\n+    url = f\"https://www.luogu.com.cn/problem/{pid}?_contentOnly=1\"\n+    redata = requests.get(url, headers=headers).text\n     if len(redata) == 0:\n         return { \"code\": 403 }\n     else:\n-        return json.loads(unquote(redata[0]))\n+        return json.loads(redata)\n```\n{% endwarn %}\n\n### 处理题目数据\n\n这里只留下 `currentData.problem` 字段里面的内容即可。\n\n```python\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\nf = open('problems.json', 'w')\nres = []\n\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1\",\n}\n\n\ndef getProblem(pid):\n    return json.loads(requests.get(f\"https://www.luogu.com.cn/problem/{pid}?_contentOnly=1\", headers=headers).text)['currentData']\n\n\nfor i in range(1000, 1010):\n    tmpdict = {}\n    tmpdict[\"pid\"] = f\"P{i}\"\n    tmpdict[\"data\"] = getProblem(f\"P{i}\")[\"problem\"]\n    res.append(tmpdict)\n\n# print(res)\nf.write(json.dumps(res, indent=4).replace(\"\\\\t\", \"    \"))\n```\n\n### 最终代码\n\n```python\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport json\nimport time\nimport pymongo\n\ndbclient = pymongo.MongoClient(\"mongodb://127.0.0.1:27017/\")\nluogudb = dbclient[\"luogu\"]\ndbcol = luogudb[\"problem\"]\n\nheaders = {\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1\",\n}\n\n\ndef getProblem(pid):\n    url = f\"https://www.luogu.com.cn/problem/{pid}?_contentOnly=1\"\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor i in range(1000, 7103):\n    pid = f\"P{i}\"\n    if list(dbcol.find({'pid': pid})) == []:\n        tmpdict = {}\n        tmpdict[\"pid\"] = pid\n        tmpdata = getProblem(pid)\n        if tmpdata[\"code\"] == 200:\n            tmpdict[\"data\"] = getProblem(pid)[\"currentData\"][\"problem\"]\n            dbcol.insert_one(tmpdict)\n            print(f\"Successfully get problem {pid}.\")\n            time.sleep(1)\n        else:\n            print(f\"Fail to get problem {pid}.\")\n    else:\n        print(f\"Problem {pid} is already exists.\")\n```\n\n有关于数据库读写的部分请参考下文的 [数据库](#数据库) 部分。\n\n## 爬取用户信息\n\n结构与题目爬虫类似，故不再作代码说明。\n\n```python\nimport json\nimport time\nimport pymongo\nimport requests\n\ndbclient = pymongo.MongoClient(\"mongodb://127.0.0.1:27017/\")\nluogudb = dbclient[\"luogu\"]\ndbcol = luogudb[\"user\"]\n\nheaders = { \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36\", }\n\ndef getUser(uid):\n    url = f\"https://www.luogu.com.cn/user/{uid}?_contentOnly=1\"\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor uid in range(1, 2):\n    if list(dbcol.find({'uid': uid})) == []:\n        tmpdict = {}\n        tmpdict[\"_id\"] = uid\n        tmpdict[\"uid\"] = uid\n        tmpdata = getUser(uid)\n        if tmpdata[\"code\"] == 200:\n            tmpdict[\"data\"] = tmpdata[\"currentData\"][\"user\"]\n            dbcol.insert_one(tmpdict)\n            print(f\"Successfully get user {uid}.\")\n            time.sleep(0.5)\n        else:\n            print(f\"Fail to get user {uid}.\")\n            time.sleep(0.5)\n    else:\n        print(f\"User {uid} is already exists.\")\n```\n\n## 数据库\n\n### 搭建数据库\n\n搭建 MongoDB 数据库只需要在 docker 里面跑一个容器，非常简便。\n\n```bash\ndocker run -v /root/data/mongo:/data/db -itd --name mongo -p 27017:27017 mongo\n```\n\n### 连接数据库\n\n```python\nclient = pymongo.MongoClient(\"mongodb://127.0.0.1:27017/\")\nluogudb = dbclient[\"luogu\"]\ncol = luogudb[\"problem\"]\n```\n\n### 存储数据\n\n```python\nif list(col.find({'pid' : pid})) == []:\n    col.insert_one(data)\n    print(\"Success.\")\nelse:\n    print(\"Already exists.\")\n```\n\n### 读取数据\n\n```python\nprint(list(col.find()))\n```\n\n## web 管理数据库\n\n再跑一个 `mongo-express` 就行了。\n\n```bash\ndocker run -d --name mongo-express -e ME_CONFIG_MONGODB_SERVER=host.docker.internal -p 8081:8081 mongo-express\n```\n\n访问 `ip:8081` 就能看到管理界面了。\n\n## 导出数据库\n\n直接运行下方命令导出为 JSON 格式即可。\n\n```bash\nmongoexport -d luogu -c problem -o /data/db/problem.json\n```\n\n或者点击对应数据库管理界面中的 `[JSON]` 按钮导出。\n\n![](https://vip2.loli.net/2020/11/26/hXtVAynYGcb8B71.png)\n\n## 成果\n\n断断续续爬了一个多星期，终于爬完了。\n\n![](https://vip1.loli.net/2020/11/26/7muojQZM125gWXL.png)\n\n","tags":["折腾"]},{"title":"【随笔】批量修改 Git 仓库的提交邮箱","url":"//post/change-git-submission-email/","content":"这几天重装了系统，一个不小心提交了好多 author 为 `\"root\"<root@localhost>` 的 commit ，于是寻找到了一个修改的方法。\n\n在仓库根目录下新建一个名为 `fix.sh` 的 shell 脚本，输入以下内容：\n\n```bash\n#!/bin/bash\n \ngit filter-branch --env-filter '\nan=\"$GIT_AUTHOR_NAME\"\nam=\"$GIT_AUTHOR_EMAIL\"\ncn=\"$GIT_COMMITTER_NAME\"\ncm=\"$GIT_COMMITTER_EMAIL\"\n \nif [ \"$GIT_COMMITTER_EMAIL\" = \"错误邮箱\" ]\nthen\n    cn=\"正确名称\"\n    cm=\"正确邮箱\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"错误邮箱\" ]\nthen\n    an=\"正确名称\"\n    am=\"正确邮箱\"\nfi\n\nexport GIT_AUTHOR_NAME=\"$an\"\nexport GIT_AUTHOR_EMAIL=\"$am\"\nexport GIT_COMMITTER_NAME=\"$cn\"\nexport GIT_COMMITTER_EMAIL=\"$cm\"\n'\n```\n\n完成后运行 `./fix.sh` 即可。\n\nPS: 跑完记得删脚本，或者直接把脚本内容改好之后拖进终端\n","tags":["随笔","Git"]},{"title":"CSP-J 2020 题解","url":"//post/solution-csp-j-2020/","content":"\n## 优秀的拆分\n\n前置知识：位运算。\n\n### 题面\n\n#### 题目描述\n\n一般来说，一个正整数可以拆分成若干个正整数的和。\n\n例如，$1=1$，$10=1+2+3+4$ 等。对于正整数 $n$ 的一种特定拆分，我们称它为“优秀的”，当且仅当在这种拆分下，$n$ 被分解为了若干个**不同**的 $2$ 的**正整数**次幂。注意，一个数 $x$ 能被表示成 $2$ 的正整数次幂，当且仅当 $x$ 能通过正整数个 $2$ 相乘在一起得到。\n\n例如，$10=8+2=2^3+2^1$ 是一个优秀的拆分。但是，$7=4+2+1=2^2+2^1+2^0$ 就不是一个优秀的拆分，因为 $1$ 不是 $2$ 的正整数次幂。\n\n现在，给定正整数 $n$，你需要判断这个数的所有拆分中，是否存在优秀的拆分。若存在，请你给出具体的拆分方案。\n\n#### 输入输出格式\n\n##### 输入格式\n\n输入只有一行，一个整数 $n$，代表需要判断的数。\n\n##### 输出格式\n\n如果这个数的所有拆分中，存在优秀的拆分。那么，你需要从大到小输出这个拆分中的每一个数，相邻两个数之间用一个空格隔开。可以证明，在规定了拆分数字的顺序后，该拆分方案是唯一的。\n\n若不存在优秀的拆分，输出 `-1`。\n\n\n### 思路\n\n首先，如果 $n$ 是奇数，那么肯定不可能拆分成若干个不同的 $2$ 的**正整数**次幂。\n以 $11$ 的拆分结果 $11=2^3+2^1+2^0$ 为例，可以看到结果里面存在一个 $2$ 的 $0$ 次幂。\n所以当 $n$ 是奇数时不存在优秀的拆分，输出 $-1$ 即可。\n\n```cpp\nif (n & 1) {\n    cout << -1 << endl;\n}\n```\n\n将 $1$ 左移 $n$ 位（`1<<n`）和 $2^n$ 是等效的。同理，将 $1$ 右移 $n$ 位（`1>>n`）等同于 $1\\div 2^n$ 。取 $x$ 的二进制第 $i$ 位可以写成 `x >> i & 1` 。\n\n我们观察一下 $10$ 转换成二进制后的结果：$(1010)_2$，再将它转换成十进制的式子列出来：\n\n$$\n\\begin{aligned}\n(1010)_2 & = 1 \\times 2^3 + 0\\times 2^2 + 1 \\times 2^1 + 0 \\times 2^0 \\\\\n& = 2^3 + 2^1 \\\\\n& = 8 + 2 \\\\\n& = 10\n\\end{aligned}\n$$\n\n再看下数据范围，24次幂就足够了。\n\n```cpp\nfor (int i = 24; i > 0; i--) {\n    if (n >> i & 1) {\n        cout << (1 << i) << ' ';\n    }\n}\n```\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    if (n & 1) {\n        cout << -1 << endl;\n    }\n    else {\n        for (int i = 24; i > 0; i--) {\n            if (n >> i & 1) {\n                cout << (1 << i) << ' ';\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## 直播获奖\n\n### 题面\n\n#### 题目描述\n\nNOI2130 即将举行。为了增加观赏性，CCF 决定逐一评出每个选手的成绩，并直播即时的获奖分数线。本次竞赛的获奖率为 $w\\%$，即当前排名前 $w\\%$ 的选手的最低成绩就是即时的分数线。\n\n更具体地，若当前已评出了 $p$ 个选手的成绩，则当前计划获奖人数为 $\\max(1, \\lfloor p * w \\%\\rfloor)$，其中 $w$ 是获奖百分比，$\\lfloor x \\rfloor$ 表示对 $x$ 向下取整，$\\max(x,y)$ 表示 $x$ 和 $y$ 中较大的数。如有选手成绩相同，则所有成绩并列的选手都能获奖，因此实际获奖人数可能比计划中多。\n\n作为评测组的技术人员，请你帮 CCF 写一个直播程序。\n\n#### 输入输出格式\n\n##### 输入格式\n\n第一行有两个整数 $n, w$。分别代表选手总数与获奖率。  \n第二行有 $n$ 个整数，依次代表逐一评出的选手成绩。\n\n##### 输出格式\n\n只有一行，包含 $n$ 个非负整数，依次代表选手成绩逐一评出后，即时的获奖分数线。相邻两个整数间用一个空格分隔。\n\n### 思路\n\n每读入一个数，使用二分插入到 vector 中，然后按照题意输出即可。\n\n注意：$score$ 数组内成绩是由小到大排列的，所以输出的时候要使用 `score.size() - max(1, i * w / 100)` 作为下标。\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n, w, t;\n    vector<int> score;\n    cin >> n >> w;\n    for (int i = 1; i <= n; i++) {\n        cin >> t;\n        score.insert(lower_bound(score.begin(), score.end(), t), t);\n        cout << score[score.size() - max(1, i * w / 100)] << ' ';\n    }\n    return 0;\n}\n```\n\n## 方格取数\n\n### 题面\n\n#### 题目描述\n\n设有 $n \\times m$ 的方格图，每个方格中都有一个整数。现有一只小熊，想从图的左上角走到右下角，每一步只能向上、向下或向右走一格，并且不能重复经过已经走过的方格，也不能走出边界。小熊会取走所有经过的方格中的整数，求它能取到的整数之和的最大值。\n\n#### 输入输出格式\n\n##### 输入格式\n\n第一行有两个整数 $n, m$。\n\n接下来 $n$ 行每行 $m$ 个整数，依次代表每个方格中的整数。\n\n##### 输出格式\n\n一个整数，表示小熊能取到的整数之和的最大值。\n\n### 思路\n\n设 $F_{i,j,0}$ 表示从一个格子上方走到该格子的路径最大和，$F_{i,j,1}$ 表示从一个格子下方走到该格子的路径最大和。\n\n若搜到以前搜过的状态则直接返回搜过的最大和（也就是 $F$ 中的值），否则继续搜索到达该格时的最大和。\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint       n, m;\nlong long w[1005][1005], f[1005][1005][2];\n\nlong long dfs(int x, int y, int from) {\n    if (x < 1 || x > n || y < 1 || y > m) {\n        return -0x3f3f3f3f;\n    }\n    if (f[x][y][from] != -0x3f3f3f3f) {\n        return f[x][y][from];\n    }\n    if (from == 0) {\n        f[x][y][from] = max({dfs(x + 1, y, 0), dfs(x, y - 1, 0), dfs(x, y - 1, 1)}) + w[x][y];\n    }\n    else {\n        f[x][y][from] = max({dfs(x - 1, y, 1), dfs(x, y - 1, 0), dfs(x, y - 1, 1)}) + w[x][y];\n    }\n    return f[x][y][from];\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            cin >> w[i][j];\n            f[i][j][0] = f[i][j][1] = -0x3f3f3f3f;\n        }\n    }\n    f[1][1][0] = f[1][1][1] = w[1][1];\n    cout << dfs(n, m, 1) << endl;\n    return 0;\n}\n```\n\n","tags":["题解","OI"]},{"title":"USTC Hackergame 2020 Write Up","url":"//post/ustc-hackergame-2020-write-up/","content":"## 前言\n\n对于我这种啥也不会的蒟蒻，拿到第676名已经是很不错的了（逃\n\n<!-- more -->\n\n## web\n\n### 签到题\n\nweb题当然要先看源码了（出题人好恶毒啊）\n\n![](https://vip1.loli.net/2020/11/25/FqvWiXe4DIzLnr3.png)\n\n再就是改值、提交\n\n![](https://vip1.loli.net/2020/11/25/dnqM5sTKEQlIC9w.png)\n\nso easy~\n\n![](https://vip2.loli.net/2020/11/25/8kSKomN217XJUEY.png)\n\nflag 获取成功：`flag{hR6Ku81-HappyHacking2020-35a790fff0}`\n\n### 2048\n\n首先F12看下源码，看到了一个有趣的东西\n\n![](https://vip2.loli.net/2020/11/25/dJXolhVqNvwSPjs.png)\n\n~~这么好的东西当然要拖到console里面去啊~~\n\n![](https://vip2.loli.net/2020/11/25/bsvZc4H8D2JWBAz.png)\n\n> 小彩蛋：JavaScript 中 String 类型转换成数字类型时会得到 `NaN`，凑成了 `banana` 。\n\n然后就出来了此题的 “flxg” \n\n![](https://vip1.loli.net/2020/11/25/Nf5gw3cM8opAQ9U.png)\n\nflxg获取成功：`flxg{8G6so5g-FLXG-7b77994fc5}`\n\n## general\n\n### 一闪而过的 Flag\n\n直接打开是会闪，但是，你闪归你闪，我直接用cmd打开，你总不能 ~~把我cmd窗口关掉吧~~ 还继续闪吧\n\n![](https://vip2.loli.net/2020/11/25/KavlGwSQoVqi4PZ.png)\n\nflag获取成功：`flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}`\n\n### 猫咪问答++\n\n> 2. 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？\n\n这个很好找，链接奉上：<https://tools.ietf.org/html/rfc1149>\n\n> 3. USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？\n\n~~谷歌一下，你就知道~~ <https://news.ustclug.org/2019/09/2019-sfd-ustc/>\n\n> 5. 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？\n\n![](https://vip2.loli.net/2020/11/25/t3di51gVr2R7yvS.png)\n\n至于剩下的... 懒得找了，直接暴力吧\n\n> 1. 以下编程语言、软件或组织对应标志是哺乳动物的有几个？\n> Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.\n\n> 4. 中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？\n\n![](https://vip2.loli.net/2020/11/25/7YmcOir9tS5xZ28.png)\n\n附上代码：\n\n```bash\nfor((i=1;i<=23;i=($i+1))); do for((j=1;j<=30;j=($j+1))); do echo \"[$i, $j] $(curl -s 'http://202.38.93.111:10001/' --data \"q1=$i&q2=256&q3=9&q4=$j&q5=17098\" -H \"Cookie: PHPSESSID=******; session=******\" | grep 'flag.*')\" ; done ; done\n```\n\nflag获取成功：`flag{b4a31f2a_G00G1e_1s_y0ur_fr13nd_228b608a32}`\n\n### 233 同学的 Docker\n\n![](https://vip2.loli.net/2020/11/25/pP5dvYI8Tz49QLB.png)\n\n众所周知，Docker 镜像是分层存储的，所以这道题可以很轻松地解出来。\n\n![](https://vip2.loli.net/2020/11/25/im2bTZqAMNJPf5d.png)\n\n先pull下来镜像。\n\n```shell\ndocker inspect 8b8d3c8324c7/stringtool\n```\n\n然后查看镜像的元信息，下面是简化版的结果（json格式）\n\n```json\n[\n    {\n        \"Id\": \"sha256:be6d023618d199e0ec7448f70e5e47a00c6c2b79777ad5e2d312a6f74d6ad56b\",\n        \"RepoTags\": [\n            \"8b8d3c8324c7/stringtool:latest\"\n        ],\n        \"RepoDigests\": [\n            \"8b8d3c8324c7/stringtool@sha256:aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2020-10-16T12:51:09.221320098Z\",\n        \"Container\": \"d2f452fddd5c71c8c57a29d67f29c69ffac419440d57664dad6e4ba1f0eff8a1\",\n        \"GraphDriver\": {\n            \"Data\": {\n                \"LowerDir\": \"/var/lib/docker/overlay2/e5ae9d16844b8a8f5a943dec4172e04f6cdd283af181e1d17315c6b4df883eb1/diff:/var/lib/docker/overlay2/e394091d4d369e4b39d51389ada0156f8df91164e7928ca705321012b3164171/diff:/var/lib/docker/overlay2/de25217d9ac38b566f5e21050325fc0b712b81eb76d8bf949535efe4048150dc/diff:/var/lib/docker/overlay2/44b1b520904edb80dde2e1cfd0bb4e8cc272bcdb3abfbecb9f7c58c66fda461f/diff:/var/lib/docker/overlay2/77e74c48f3d794c594fcbbaafb1de3de084d5680c7361eb3c694cd74bb5ba7d2/diff:/var/lib/docker/overlay2/e2f50b5ba8b187a859f175daf953b5f1244ca210e65fc281cebbb490c1736090/diff:/var/lib/docker/overlay2/c49ab73078dbf960574fba1cb22cbfa6cb80300213ef9ce0e8541204181b2ea6/diff:/var/lib/docker/overlay2/cdca87b3621cb3bafbb198f6b90aa229e225eec78f0a58b0b17415bc0c252c3c/diff:/var/lib/docker/overlay2/c75c733f9469403b6677b86de747b78eee86b342e4b8cb67301b62bc37148f0d/diff:/var/lib/docker/overlay2/6c5b7e0fcab90d5b9e95987fa4901fdaca167e20078efc15255025edaa3bffe5/diff:/var/lib/docker/overlay2/15ec67c13cb10d0efe49ffa8038af1e4e15ee4ace3d0e3cbb3b35373438162ee/diff:/var/lib/docker/overlay2/63919ff473de17fc4a04bebe8e3163ac9a6615e860c8d154c58b40e83cae3008/diff:/var/lib/docker/overlay2/301804bb5ea02f0be82935af0838aae81fb796470e35ca799c010ee551c63901/diff:/var/lib/docker/overlay2/837182ab20cd4356c084efceb23eaf81921b199deeb4260a3bb8bd3690bdf248/diff:/var/lib/docker/overlay2/83f0cdea53e8d31281de36413a4d5e5ba9aef2fce54733ab8686bdc04a0c7736/diff:/var/lib/docker/overlay2/fad7f08992db8ca5ee5d731ccc21ac6746107798714b453e6fb21f23f0de8ed6/diff:/var/lib/docker/overlay2/2742f86c6ff24a479ff553458418cee16e1d90c3ba6e51f28599fcd2143108c0/diff:/var/lib/docker/overlay2/f0ea5cad64532fdff5edaaad4880132a8811bbd04019a2b216710dfda4bb829b/diff:/var/lib/docker/overlay2/af49c2f259440c1d94b6843258a68201bb3a37b6ec0e20b7e1dc6773de29e5eb/diff:/var/lib/docker/overlay2/9d6591c82c88ba3d461cf4d20c03e2a4b064454e3bbe9718b26e97eaf1fa703b/diff:/var/lib/docker/overlay2/eb71979f0abedbf4854bd95a364726dd7dc21b779512dad582bdefe87b24efb3/diff:/var/lib/docker/overlay2/b14870a3b3e75ac73506b96ad8de3ac918b6d1dbb8cb702e56b1d879910ee8d7/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/work\"\n            },\n            \"Name\": \"overlay2\"\n        }\n    }\n]\n```\n\n查看 diff 文件夹：\n\n![](https://vip2.loli.net/2020/11/25/IxlmEhSfRUPKy6G.png)\n\n然后就能看到文件内容了~\n\n![](https://vip2.loli.net/2020/11/25/eLq2mSpCi68wVZQ.png)\n\nflag获取成功：`flag{Docker_Layers!=PS_Layers_hhh}`\n","tags":["CTF"]},{"title":"【题解】7612. 2020牛客NOIP赛前集训营-普及组（第五场）","url":"//post/solution-nowcoder-contest-7612/","content":"\n比赛链接：<https://ac.nowcoder.com/acm/contest/7612>\n\n## A-购物\n\n### 题面\n\n#### 题目描述\n\n超市进行了买 k 送一的活动，商品的单价是 x 元，牛妹想至少买 n 件商品，\n输出最少需要花费多少钱。\n\n#### 输入描述\n\n第一行一个整数 $T\\leq 100$，表示 $T$ 组数据。\n\n接下来 T 行，每行 3 个整数  $n, k, x (1\\leq n,x \\leq 1000, 1\\leq k \\leq 100)$\n\n#### 输出描述\n\n对于每组数据输出一行表示答案。\n\n#### 样例\n\n+ 样例1\n\n```\n[input]\n3\n3 2 1\n10 3 4\n5 3 2\n[output]\n2\n32\n8\n```\n\n### 思路\n\n签到题，模拟即可。\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--) {\n        int n, k, x, ans = 0;\n        cin >> n >> k >> x;\n        int i = 0, j = 0;\n        while(i < n) {\n            i++;\n            j++;\n            ans += x;\n            if(j == k) {\n                j = 0;\n                i++;\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n## B-交换\n\n### 题面\n\n#### 题目描述 \n给一个长度为 $n$ 的 01 序列 $s_1, s_2, ...., s_n$，现在可以至多进行 1 次如下操作：\n选择 $1 \\leq x < n$，将 $s$ 序列变成 $\\{s_{x+1},s_{x+2},....., s_n, s_1, s_2, ....s_x\\}$\n\n输出最长的全为 $1$ 的子区间长度。\n\n#### 输入描述\n\n一个 01 字符串，表示序列 $s$。($1\\leq |s| \\leq 100000$)\n\n#### 输出描述\n\n输出一个整数表示答案。\n\n#### 样例\n\n+ 样例1\n```\n[input]\n1001\n[output]\n2\n```\n\n+ 样例2\n```\n[input]\n11111\n[output]\n5\n```\n\n+ 样例3\n```\n[input]\n10111010\n[output]\n3\n```\n\n### 思路\n\n给定的字符串首尾相接就会成一个环，那么可以破环成列，在 `s` 的末尾在添加一个 `s`，以样例 `10111010` 为例，处理过后则变成了 `1011101010111010`，那么这样就可以找出最长的全为 $1$ 的子区间长度。\n\n注意当给定的字符串全为 $1$ 时，有可能会出现 $f_i \\geq n$ 的情况，按照题意， $f_i\\leq n$ ，所以当 $s_i$ 为 `'1'` 时，递推式为 $f_i = \\min(f_{i-1} + 1,  n)$ 。\n\n最终的答案就是$\\max(\\{f_1, f_2, ..., f_n\\})$\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int ans = 0, cnt = 0;\n    string s;\n    cin >> s;\n    int n = s.size()-1;\n    s += s;\n    int i = 0, f[200005];\n    memset(f, 0x00, sizeof(f));\n    for(int i = 1 ; i < s.size() ; i++) {\n        if(s[i] == '1') {\n            f[i] = min(f[i-1]+1, n);\n        }\n    }\n    for(int i = 0 ; i <= 2*n ; i++) {\n        ans = max(f[i], ans);\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n## C-最少移动\n\n### 题面\n\n#### 题目描述 \n\n给一个长度为 $n$ 的正整数序列 $\\{a_1,a_2,...,a_n\\}$，每次操作可以选择两个相邻的位置，让一个元素 $-1$ 另一个元素 $+1$，输出最少几次操作，能让所有元素相等，如果不可能实现，请输出 `-1`。\n\n#### 输入描述\n\n第一行一个整数 $T(T \\leq 20)$，表示 $T$ 组数据。\n\n每组数据第一行一个整数 $n$，第二行 $n$ 个数字表示 $a$ 序列，$1 \\leq a_i \\leq 100000$\n\n#### 输出描述\n\n对于每组数据，输出一个整数表示答案。\n\n#### 样例\n\n+ 样例1\n\n```\n[input]\n3\n3\n1 3 2\n3\n2 2 3\n5\n1 2 3 1 3\n[output]\n1\n-1\n3\n```\n\n### 思路\n\n这道题可以用前缀和做。\n\n$$\na = \\{1, 2, 3, 1, 3\\}\\\\\nsum = \\{1, 3, 6, 7, 10\\}\n$$\n\n$a_i$ 为序列元素， $sum_i$ 为前缀和元素。\n\n不难发现，当 $a_i+1, a_{i+1}-1$ 时，$sum_i=sum_i+1$ ，而 $sum_i+1$ 不变。\n同理，当 $a_i-1, a_{i+1}+1$ 时，$sum_i=sum_i-1$ ，而 $sum_i+1$ 仍不变。\n\n当 $a$ 中所有元素相等时，$sum$ 一定是一个**等差数列**。\n\n举个例子：\n\n$$\na = \\{2,2,2,2,2\\}\\\\\nsum = \\{2,4,6,8,10\\}\n$$\n\n所以可以得到结论：当 $f_n \\bmod n \\ne 0$ 时， $sum$ 中的元素**不可能**成等差数列，因此 $a$ 中的元素**不可能**相等，无解。 反之则有解。\n\n由上方发现的规律可知：在变换过程中，$sum_n$ 总是不变的，因此可以自后向前逆推：设公差为$g$，则 $f_i = f_{i+1}-g (0<i<n)$，所以将 $f_i$ 变成 $f_{i+1}-g$ 所需的步数为 $abs(i*g-f_i)$。\n\n提示：此题必须开 **long long**！\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--) {\n        long long n, a[100005], f[100005], ans = 0;\n        f[0] = 0;\n        cin >> n;\n        for(long long i = 1 ; i <= n ; i++) {\n            cin >> a[i];\n            f[i] = f[i-1] + a[i];\n        }\n        if(f[n]%n != 0) {\n            cout << -1 << endl;\n        }\n        else {\n            long long g = f[n]/n;\n            for (long long i = n; i > 0; i--) {\n                ans += abs(i * g - f[i]);\n            }\n            cout << ans << endl;\n        }\n    }\n    return 0;\n}\n```\n\n## D-飞行棋\n\n### 题面\n\n#### 题目描述 \n\n牛牛在玩飞行棋。\n\n有无限个格子排成一行，从左到右，标号为 $0,1,....,n, ......, \\infty$ 终点为 $0$ ，有一架飞机一开始在 $n$ 号位置。\n\n排骨龙每回合可以先投掷一次 $d$ 面的骰子，1 到 $d$ 等概率出现。\n\n投出点数 $x$ 后，飞机会移动 $x$ 步，每步移动一格，方向初始向左移动，若到达终点，会向右移动。\n若投出的点数为 $d$ 点，可以继续投掷，直到投出的点数不是 $d$ 点。\n求让这架飞机停在终点回合数的期望。\n\n#### 输入描述\n\n第一行一个数字 $T$ 表示 $T$ ($T \\leq 100$) 组数据。\n\n接下来每行两个正整数 $n,d (2\\leq d,n \\leq 100000)$\n\n#### 输出描述\n\n输出 T 行，每行保留两位小数输出答案。\n\n#### 样例\n\n+ 样例1\n```\n[input]\n6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6\n[output]\n5.00\n5.00\n5.00\n5.00\n5.00\n5.17\n```\n\n### 思路\n\n设 $f_x$ 为从 $x$ 走到 $1$ 的 步数。\n+ 当 $x \\geq d$ 时，$f_x = \\sum_{i=1}^{d} \\frac{dp_{x-i}}{d}$\n+ 当 $x < d$ 时， 期望为 $d-1$ 。\n\n来源：[2020牛客NOIP赛前集训营-普及组（第五场）题解](https://ac.nowcoder.com/discuss/552087)\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while(t--) {\n        int n, d;\n        cin >> n >> d;\n        if(d == 1) {\n            cout << \"1.00\" << endl;\n        }\n        else if(n < d) {\n            cout << fixed << setprecision(2) << d-1.00 << endl;\n        }\n        else {\n            double f[100005], sum[100005];\n            memset(f, 0x00, sizeof(f));\n            memset(sum, 0x00, sizeof(sum));\n            f[0] = sum[0] = 1;\n            for(int i = 1 ; i < d, i <= n ; i++) {\n                f[i] = d - 1.00;\n                sum[i] = sum[i-1] + f[i];\n            }\n            for(int i = d ; i <= n ; i++) {\n                    f[i]   = (sum[i-1] + f[i] - f[i-d-1])/d;\n                    sum[i] = sum[i-1] + f[i] - f[i-d-1];\n            }\n            cout << fixed << setprecision(2) << f[n] << endl;\n        }\n    }\n    return 0;\n}\n```\n\n","tags":["题解"]},{"title":"Bilibili 1024 节 CTF Write Up","url":"//post/bilibili-1024-ctf-write-up/","content":"\n比赛地址： <https://security.bilibili.com/sec1024/>\n\n## T1：页面的背后是什么？\n\n~~F12解决一切问题~~\n\n![](https://vip2.loli.net/2020/11/28/XrLpIf2OHs4YAxJ.png)\n\n## T2：真正的秘密只有特殊的设备才能看到\n\n改下UA就行了，轻松到手\n\n![](https://vip2.loli.net/2020/11/28/WPLCUHNYiE2nFwJ.png)\n\n![](https://vip2.loli.net/2020/11/28/83GrjFbTwJf1BHn.png)\n\n## T3：密码是啥？\n\n看了看源码，没啥思路，最后随便试了试 `admin` `root` `bilibili` 什么的，竟然是对的。\n\n+ 用户名 `admin`\n+ 密码 `bilibili`\n\n另外，你告诉我什么是 **falg** ？\n\n![](https://vip1.loli.net/2020/11/28/eg9kBtR1aQizGYE.png)\n\n## T4：对不起，权限不足～\n\n第一次访问：\n\n![](https://vip1.loli.net/2020/11/28/roVjXTfs4v8ibP5.png)\n\n第二次访问：\n\n![](https://vip1.loli.net/2020/11/28/RpEsGn8c9KY16MH.png)\n\n查看源码可以发现有个 API 请求，查看请求数据得到以下信息。\n\n![](https://vip1.loli.net/2020/11/28/nhF7pCTQsVYxKdj.png)\n\nrole里面的东西，贴进谷歌一搜就知道它是 `user` 的 MD5 。\n\n和超级管理员相关的名字相信大家都知道，无非就是 `admin` `Administrator` `root` 之类的东西。\n\n挨个试，最后发现 `Administrator` 是正确的。\n\n```shell\ncurl \"http://45.113.201.36/api/ctf/4\" --cookie \"role=7b7bc2512ee1fedcd76bdc68926d4f7b; session=***;\"\n```\n\n![](https://vip1.loli.net/2020/11/28/gEhkmTJrnaoMwPv.png)\n\n## T5：别人的秘密\n\n![](https://vip1.loli.net/2020/11/28/c4BjYs3nVuCpxmH.png)\n\n发现有个API，还有个 UID。\n\n最开始没想到需要从代码里面的“初始UID”开始扫，浪费了我好多时间。\n\n```shell\nfor ((i=100336889;$i<9999999999;i=($i+1))); do echo -e \"[$i] \\c\" && curl \"http://45.113.201.36/api/ctf/5?uid=${i}\" -H 'User-Agent: bilibili Security Browser' -H 'Cookie: session=*****; role=ee11cbb19052e40b07aac0ca060c23ee' ; done\n```\n\n![](https://vip1.loli.net/2020/11/28/m1Hr4u8FOJe7ycI.png)\n\n## T6~T10：结束亦是开始，接下来的旅程，需要少年自己去探索啦～\n\n先扫了扫端口，发现有个 redis\n\n![](https://vip2.loli.net/2020/11/28/E29tLxSiC6Qzn5O.png)\n\n```shell\nredis-cli -h 120.92.151.189 -p 6379\n```\n\n登上去看看，发现了第八题的 flag 。\n\n![](https://vip1.loli.net/2020/11/28/Oo5vyeEsChmSt2H.png)\n\n然后爆破下目录\n\n![](https://vip1.loli.net/2020/11/28/QEnxZsg8FpiOKwm.png)\n\n有个 test.php ，访问下发现是个 JSfuck 加密，丢进浏览器里面解密下\n\n![](https://vip1.loli.net/2020/11/28/G7TWPndrhqBmvAI.png)\n\n程序员最多的地方，那就肯定是 Github 了。\n\n然后找到了一个仓库 [interesting-1024/end](https://github.com/interesting-1024/end)\n\n有个 `end.php`\n\n```php\n<?php\n\n//filename end.php\n\n$bilibili = \"bilibili1024havefun\";\n\n$str = intval($_GET['id']);\n$reg = preg_match('/\\d/is', $_GET['id']);\n\nif(!is_numeric($_GET['id']) and $reg !== 1 and $str === 1){\n\t$content = file_get_contents($_GET['url']);\n\t\n\t//文件路径猜解\n\tif (false){\n\t\techo \"还差一点点啦～\";\n\t}else{\n\t\techo $flag;\n\t}\n}else{\n\techo \"你想要的不在这儿～\";\n}\n?>\n```\n\n然后需要构造出一个 符合 `!is_numeric($_GET['id']) and preg_match('/\\d/is', $_GET['id']) !== 1 and intval($_GET['id']) === 1` 的请求即可。\n\n![](https://vip1.loli.net/2020/11/28/mCIevr1HSMBpkdi.png)\n\n可以得到一个图片的链接 `http://45.113.201.36/blog/imgs/bilibili_224a634752448def6c0ec064e49fe797_havefun.jpg`\n\n![](https://vip2.loli.net/2020/11/28/iXEgYzjPtH2NhQw.png)\n\n这个图片的末尾就是第十个 flag 了（图中标蓝的地方）。\n","tags":["CTF"]},{"title":"【题解】7606. 2020牛客NOIP赛前集训营-普及组（第二场）","url":"//post/solution-nowcoder-contest-7606/","content":"\n## A-面试\n\n提交记录：[45258014](https://ac.nowcoder.com/acm/contest/view-submission?submissionId=45258014)\n\n### 思路\n\n统计 `A` `B` `C` `D` 四个字母的出现次数。\n\n```cpp\nfor(int i = 0 ; i < 4 ; i++) {\n    if(s[i] == 'A') cnta++;\n    else if(s[i] == 'B') cntb++;\n    else if(s[i] == 'C') cntc++;\n    else if(s[i] == 'D') cntd++;\n}\n```\n\n根据题目中所描述的内容：\n\n> 如果面试者在四轮中有一次发挥被评为 D，或者两次发挥被评为 C，就不会通过面试。如果面试者没有一次被评为 D，并且有三个或以上的 A，则会获得 special offer。其余情况会获得普通 offer。\n\n可以写出如下代码\n\n```cpp\nif(cntd || cntc >= 2) {\n    cout << \"failed\" << endl;\n}\nelse if(!cntd && cnta >= 3) {\n    cout << \"sp offer\" << endl;\n}\nelse {\n    cout << \"offer\" << endl;\n}\n```\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t, cnta, cntb, cntc, cntd;\n    string s;\n    cin >> t;\n    while(t--) {\n        cnta = cntb  = cntc = cntd = 0;\n        cin >> s;\n        for(int i = 0 ; i < 4 ; i++) {\n            if(s[i] == 'A') cnta++;\n            else if(s[i] == 'B') cntb++;\n            else if(s[i] == 'C') cntc++;\n            else if(s[i] == 'D') cntd++;\n        }\n        if(cntd || cntc >= 2) {\n            cout << \"failed\" << endl;\n        }\n        else if(!cntd && cnta >= 3) {\n            cout << \"sp offer\" << endl;\n        }\n        else {\n            cout << \"offer\" << endl;\n        }\n    }\n    return 0;\n}\n```\n\n## B-纸牌游戏\n\n提交记录：[45267496](https://ac.nowcoder.com/acm/contest/view-submission?submissionId=45267496)\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n, a[100010];\n    cin >> n;\n    for(int i = 0 ; i < n ; i++) {\n        cin >> a[i];\n    }\n    sort(a, a+n);\n    for(int i = 0 ; i < n ; i++) {\n        if(a[i] >= n-i-1) {\n            cout << n-i << endl;\n            return 0;\n        }\n    }\n    return 0;\n}\n```\n\n### 参考资料\n\n+ [7606B 纸牌游戏题解 - wzkdh的牛客博客](https://blog.nowcoder.net/n/99ff2344e6c04c21ac52c1f58a7b2d83)\n\n## C-涨薪\n\n提交记录： [45259535](https://ac.nowcoder.com/acm/contest/view-submission?submissionId=45259535)\n\n### 思路\n\n#### 分析\n\n+ 当 $m \\geq 2$ 时，会有 $n-(x+y)$ 名员工被辞退，需要计算以下内容：\n\n$$\n\\left\\{\\begin{array}{lc}a_i\\times 3^m&(0\\leq i<x)\\\\\na_i\\times 2^m&(x \\leq i < x+y)\n\\end{array}\\right.\n$$ \n\n+ 当 $m = 1$ 时，没有员工被开除，需要计算以下内容：\n\n$$\n\\left\\{\\begin{array}{lc}a_i\\times 3&(0\\leq i<x)\\\\\na_i\\times 2&(x \\leq i < x+y)\\\\\na_i&(x+y \\leq i < n)\n\\end{array}\\right.\n$$\n\n如果纯暴力的话复杂度是 $O(nm)$ 所以用快速幂优化下，就变成了 $O(n \\log m)$ 的复杂度。\n\n\n#### 代码模板\n\n快速幂板子（带mod版本）：\n\n```cpp\nlong long binpow(long long a, long long b, long long mod) {\n    a %= mod;\n    long long res = 1;\n    while (b > 0) {\n        if (b & 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b >>= 1;\n    }\n    return res;\n}\n```\n\n### 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int mod = 1e9 + 7;\n\nbool cmp(int a, int  b) {\n    return a > b;\n}\n\nlong long binpow(long long a, long long b) {\n    a %= mod;\n    long long res = 1;\n    while (b > 0) {\n        if (b & 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b >>= 1;\n    }\n    return res;\n}\n\nint main() {\n    long long n, m, x, y, a[100005], ans = 0;\n    cin >> n >> m >> x >> y;\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n    sort(a, a + n, cmp);\n    for (int j = 0; j < x; j++) {\n        a[j] *= binpow(3, m);\n    }\n    for (int j = x; j < x + y; j++) {\n        a[j] *= binpow(2, m);\n    }\n    for (int i = 0; i < x + y; i++) {\n        ans += a[i];\n        ans %= mod;\n    }\n    if (m < 2) {\n        for (int i = x + y; i < n; i++) {\n            ans += a[i];\n            ans %= mod;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### 参考资料\n\n+ [模意义下取幂 - 快速幂 - OI Wiki](https://oi-wiki.org/math/quick-pow/#_4)\n\n## D-变换\n\n这道题没做出来，比赛结束后官方题解没看懂，待填坑。\n\n","tags":["题解"]},{"title":"【题解】P1200 [USACO1.1] 你的飞碟在这儿 Your Ride Is Here","url":"//post/solution-luogu-p1200/","content":"\n## 题面\n\n难度：<span style=\"color: #fe4c61;\">**入门**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">数论，数学</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">字符串</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">USACO</span>\n\n### 题目描述\n\n众所周知，在每一个彗星后都有一只 UFO。这些 UFO 时常来收集地球上的忠诚支持者。不幸的是，他们的飞碟每次出行都只能带上一组支持者。因此，他们要用一种聪明的方案让这些小组提前知道谁会被彗星带走。他们为每个彗星起了一个名字，通过这些名字来决定这个小组是不是被带走的那个特定的小组（你认为是谁给这些彗星取的名字呢？）。关于如何搭配的细节会在下面告诉你；你的任务是写一个程序，通过小组名和彗星名来决定这个小组是否能被那颗彗星后面的 UFO 带走。\n\n小组名和彗星名都以下列方式转换成一个数字：最终的数字就是名字中所有字母的积，其中 $A$ 是 $1$ ， $Z$ 是 $26$ 。例如，$\\text{USACO}$ 小组就是 $21 \\times 19 \\times 1 \\times 3 \\times 15=17955$ 。如果小组的数字 $\\bmod 47$ 等于彗星的数字 $\\bmod 47$ ，你就得告诉这个小组需要准备好被带走！（记住 $a \\bmod b$ 是 $a$ 除以 $b$ 的余数；$34 \\bmod 10 = 4$）\n\n写出一个程序，读入彗星名和小组名并算出用上面的方案能否将两个名字搭配起来，如果能搭配，就输出 `GO`，否则输出 `STAY`。小组名和彗星名均是没有空格或标点的一串大写字母（不超过 $6$ 个字母）。\n\n### 输入格式\n\n第 1 行：一个长度为 $1$ 到 $6$ 的大写字母串，表示彗星的名字。\n\n第 2 行：一个长度为 $1$ 到 $6$ 的大写字母串，表示队伍的名字。\n\n### 输出格式\n\n无。\n\n### 输入输出样例\n\n**输入 #1**\n\n```text\nCOMETQ\nHVNGAT\n```\n\n**输出 #1**\n\n```text\nGO\n```\n\n**输入 #2**\n\n```text\nABSTAR\nUSACO\n```\n\n**输出 #2**\n\n```text\nSTAY\n```\n\n## 思路\n\n按照题意计算即可。\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int us = 1, zs = 1;\n    string a, b;\n    getline(cin, a);\n    getline(cin, b);\n    for (int i = 0; i < 7; i++) {\n        if (a[i] <= 0) break;\n        else us *= a[i] - 64;\n    }\n    for (int i = 0; i < 7; i++) {\n        if (b[i] <= 0) break;\n        else zs *= b[i] - '@';\n    }\n    us %= 47;\n    zs %= 47;\n    if (us == zs) cout << \"GO\" << endl;\n    else cout << \"STAY\" << endl;\n    return 0;\n}\n```\n\n## 后记\n\n+ Update1：2019-07-10\n+ Update2：2020-10-12\n  - 优化代码\n  - 弃用不安全的 `gets` 函数。\n","tags":["题解","OI"]},{"title":"使用树莓派+nginx搭建 rtmp 直播服务","url":"//post/raspberry-pi-rtmp-live/","content":"\n国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。\n\n<!-- more -->\n\n使用 nginx 模块：[`nginx-rtmp-module`](https://github.com/arut/nginx-rtmp-module)\n\n## 安装 nginx & nginx-rtmp-module\n\napt, yes!\n\n```bash\napt update\napt upgrade -y\napt install nginx libnginx-mod-rtmp -y\n```\n\n访问服务器 IP ，出现如下图所示网页即代表安装成功。\n\n![](https://vip1.loli.net/2020/11/26/BdKOhDuxIaYks6q.png)\n\n## 修改 nginx 配置 \n\n打开 `/etc/nginx/nginx.conf` ，在末尾处插入下面的配置\n\n```nginx\nrtmp {\n    server {\n        listen     1935;              # 服务端口\n        chunk_size 4096;              # 数据传输块的大小\n\n        application vod {\n            play /opt/video;          # 视频文件存放位置。\n        }\n\n        application rtmplive {\n            live            on;        # 开启直播\n            max_connections 64;        # 为 rtmp 引擎设置最大连接数。默认为 off\n        }\n\n        application live {\n            live                on;              # 开启直播\n            hls                 on;              # 这个参数把直播服务器改造成实时回放服务器。\n            wait_key            on;              # 对视频切片进行保护，这样就不会产生马赛克了。\n            hls_path            /opt/video/hls;  # 切片视频文件存放位置。\n            hls_fragment        10s;             # 设置HLS片段长度。\n            hls_max_fragment    10s;             # 设置HLS片段最大长度。\n            hls_playlist_length 30s;             # 设置HLS播放列表长度。\n            hls_continuous      on;              # 连续模式。\n            hls_cleanup         on;              # 对多余的切片进行删除。\n            hls_nested          on;              # 嵌套模式。\n        }\n    }\n}\n```\n\n打开默认站点配置文件 `/etc/nginx/sites-available/default` ，在 `server` 部分的末尾添加以下内容\n\n```nginx\nlocation /live {\n    types {\n        application/vnd.apple.mpegurl m3u8;\n        video/mp2t                    ts;\n    }\n\n    autoindex on;\n    alias     /opt/video/hls;\n\n    expires -1;\n\n    add_header 'Cache-Control'                    'no-cache';\n    add_header 'Access-Control-Allow-Origin'      '*';\n    add_header 'Access-Control-Allow-Credentials' 'true';\n    add_header 'Access-Control-Allow-Methods'     'GET, POST, OPTIONS';\n    add_header 'Access-Control-Allow-Headers'     'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n}\nlocation /stat {\n    rtmp_stat all;\n    # rtmp_stat_stylesheet stat.xsl;\n}\n```\n\n插入完以后配置文件会变成下面的样子\n\n```diff\n--- /etc/nginx/sites-available/default\n+++ /etc/nginx/sites-available/default\n@@ -1,14 +1,36 @@\n server {\n     listen 80 default_server;\n     listen [::]:80 default_server;\n\n     root /var/www/html;\n\n     index index.html index.htm index.nginx-debian.html;\n\n     server_name _;\n\n     location / {\n         try_files $uri $uri/ =404;\n     }\n+\n+    location /live {\n+        types {\n+            application/vnd.apple.mpegurl m3u8;\n+            video/mp2t                    ts;\n+        }\n+\n+        autoindex on;\n+        alias     /opt/video/hls;\n+\n+        expires -1;\n+\n+        add_header 'Cache-Control'                    'no-cache';\n+        add_header 'Access-Control-Allow-Origin'      '*';\n+        add_header 'Access-Control-Allow-Credentials' 'true';\n+        add_header 'Access-Control-Allow-Methods'     'GET, POST, OPTIONS';\n+        add_header 'Access-Control-Allow-Headers'     'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n+    }\n+    location /stat {\n+        rtmp_stat all;\n+        # rtmp_stat_stylesheet stat.xsl;\n+    }\n }\n```\n\n修改完成后使用 `nginx -t` 测试配置文件是否正确\n\n```\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n当出现成功提示时，使用 `nginx -s reload` 平滑重启 nginx。\n\n重启成功后使用 `netstat -lnp` 查看 `tcp/1935` 端口是否开启。\n\n![](https://vip1.loli.net/2020/11/26/Xy3Nq5WZaogLIvR.png)\n\n## 使用 OBS 连接直播服务器\n\n打开 OBS ，在 设置 -> 推流 中配置以下内容\n\n| 项目 | 值 |\n| ---- | --- |\n| 服务 | `自定义...` |\n| 服务器 | `rtmp://${ip}/live` |\n| 串流密钥 | `${key}` |\n\n{% info %}\n其中，`${ip}` 和 `${key}` 设置为你需要的值即可。\n{% endinfo %}\n\n回到主界面，点击 **开始推流** 进行推流。\n\n## 使用客户端拉取直播流\n\n![](https://vip2.loli.net/2020/11/26/jpqVTAgXSW6oyEP.png)\n\n在 `PotPlayer` `QQ影音` 等播放器中选择 `打开->打开URL` 。\n\n\n![](https://vip1.loli.net/2020/11/26/rzBNukVTntf5xUR.png)\n\n输入 `http://${ip}/live/${key}/index.m3u8` ，点击确定。\n\n![](https://vip1.loli.net/2020/11/26/crbEBQNC3qH8uOl.jpg)\n\n此时可以就看到直播画面了。\n\n## 网页端播放\n\n页面中只有一个播放器，其他功能请自行实现。\n\n```\n<html>\n\n<head>\n    <title>Live Player</title>\n    <meta charset=\"UTF-8\">\n</head>\n\n<body>\n    <div id=\"dplayer\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/hls.js@0.14.13/dist/hls.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/dplayer@1.26.0/dist/DPlayer.min.js\"></script>\n    <script>\n        const dp = new DPlayer({\n            container: document.getElementById('dplayer'),\n            live: true,\n            video: {\n                url: 'http://${ip}/live/${key}/index.m3u8',\n                type: 'hls',\n            },\n        });\n    </script>\n</body>\n\n</html>\n```\n\n![](https://vip1.loli.net/2020/11/26/9X6mUtF4fLzdaYn.jpg)\n\n## 后记\n\n如果没有在外直播的需求，不要将 rtmp 端口映射至公网，这可能会带来一些不必要的麻烦。\n\n## 参考资料\n\n[^1]: [NGINX-based Media Streaming Server](https://github.com/arut/nginx-rtmp-module)\n","tags":["折腾"]},{"title":"【题解】P1724 东风谷早苗","url":"//post/solution-luogu-p1724/","content":"\n## 题面\n\n难度：<span style=\"color: #f39c11;\">**普及-**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">模拟</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">字符串</span>\n\n### 题目描述\n\n在幻想乡，东风谷早苗是以高达控闻名的高中生宅巫女。某一天，早苗终于入手了最新款的钢达姆模型。作为最新的钢达姆，当然有了与以往不同的功能了，那就是它能够自动行走。\n\n早苗的新模型可以按照输入的命令进行移动，命令包含 `E` `S` `W` `N` 四种，分别对应四个不同的方向，依次为东、南、西、北。执行某个命令时，它会向着对应方向移动一个单位。作为新型机器人，模型自然不会只单单执行一个命令，它可以执行命令串。对于输入的命令串，每一秒它会按照命令行动一次。而执行完命令串最后一个命令后，会自动从头开始循环。在 $0$ 秒时早苗将钢达姆放置在了 $(0,0)$ 的位置，并且输入了命令串。\n\n+ 向东移动，坐标改变改变为 $(x+1,\\ y)$\n+ 向南移动，坐标改变改变为 $(x,\\ y-1)$\n+ 向西移动，坐标改变改变为 $(x-1,\\ y)$\n+ 向北移动，坐标改变改变为 $(x,\\ y+1)$\n\n现在她想要知道 $T$ 秒后钢达姆所在的位置坐标。\n\n### 输入格式\n\n第1行：一个字符串，表示早苗输入的命令串，保证至少有 1 个命令。\n第2行：一个正整数 $T$ 。\n\n### 输出格式\n\n第1行：两个整数，表示 $T$ 秒时，钢达姆的坐标。\n\n### 输入输出样例\n\n**输入 #1**\n\n```text\nNSWWNSNEEWN\n12\n```\n\n**输出 #1**\n\n```text\n-1 3\n```\n\n## 思路\n\n### 60分\n\n按照题意模拟即可\n\n### 100分\n\n由于题目数据范围过大，单纯模拟无法通过此题，所以需要寻找一些规律。\n\n> 而执行完命令串最后一个命令后，会自动从头开始循环。\n\n通过仔细读题可以发现，在运行中命令串可能会被执行多次，因此可以先算出命令串被执行了几次，再模拟出最终结果。\n\n## 代码\n\n### 60分\n\n纯暴力做法\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int    x = 0, y = 0, t = 0, i = 0;\n    string s;\n    cin >> s >> t;\n    while (t--) {\n        if (i >= s.size()) {\n            i = 0;\n        }\n        switch (s[i]) {\n            case 'E': x++; break;\n            case 'S': y--; break;\n            case 'W': x--; break;\n            case 'N': y++; break;\n        }\n        i++;\n    }\n    cout << x << ' ' << y << endl;\n    return 0;\n}\n```\n\n### 100分\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n\nint main() {\n    int    x = 0, y = 0, t = 0;\n    string s;\n    cin >> s >> t;\n    for (int i = 0; i < s.size(); i++) {\n        switch (s[i]) {\n            case 'E': x++; break;\n            case 'S': y--; break;\n            case 'W': x--; break;\n            case 'N': y++; break;\n        }\n    }\n    x *= (int)(t / s.size());\n    y *= (int)(t / s.size());\n    for (int i = 0; i < t % s.size(); i++) {\n        switch (s[i]) {\n            case 'E': x++; break;\n            case 'S': y--; break;\n            case 'W': x--; break;\n            case 'N': y++; break;\n        }\n    }\n    cout << x << ' ' << y << endl;\n    return 0;\n}\n```\n","tags":["题解"]},{"title":"【题解】P4994 终于结束的起点","url":"//post/solution-luogu-p4994/","content":"\n## 题面\n\n难度：<span style=\"color: #f39c11;\">**普及-**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">递推</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">枚举，暴力</span> <span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">斐波那契</span>\n\n### 题目描述\n\n广为人知的斐波拉契数列 $\\mathrm{fib}(n)$ 是这么计算的：\n\n$$\nfib(n) =\n\\left\n    \\{\n    \\begin{array}{lc}\n    0, &n=0 \\\\\n    1, &n=1 \\\\\n    fib(n-1)+fib(n-2), &n>1\n    \\end{array}\n\\right.\n$$\n\n也就是 $0, 1, 1, 2, 3, 5, 8, 13, \\ldots$，每一项都是前两项之和。\n\n小 F 发现，如果把斐波拉契数列的每一项对任意大于 $1$ 的正整数 $M$ 取模的时候，数列都会产生循环。\n\n当然，小 F 很快就明白了，因为 ($\\mathrm{fib}(n - 1) \\bmod M$) 和 ($\\mathrm{fib}(n - 2) \\bmod M)$ 最多只有 $M ^ 2$ 种取值，所以在 $M  ^ 2$ 次计算后一定出现过循环。\n\n\n甚至更一般地，我们可以证明，无论取什么模数 $M$，最终模 $M$ 下的斐波拉契数列都会是 $0, 1, \\cdots, 0, 1, \\cdots$。\n\n现在，给你一个模数 $M$，请你求出最小的 $n > 0$，使得 $\\mathrm{fib}(n) \\bmod M = 0, \\mathrm{fib}(n + 1) \\bmod M = 1$。\n\n### 输入格式\n\n输入一行一个正整数 $M$ 。\n\n### 输出格式\n\n输出一行一个正整数 $n$ 。\n\n### 输入输出样例\n\n**输入 #1**\n\n```text\n2\n```\n\n**输出 #1**\n\n```text\n3\n```\n\n**输入 #2**\n\n```text\n6\n```\n\n**输出 #2**\n\n```text\n24\n```\n\n## 思路\n\n暴力+优化 = AC\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long a[10000000];\n\nlong long dfib(long long x, long long m) {\n    if (a[x] != -1) {\n        return a[x];\n    }\n    if (x == 0) {\n        a[x] = 0 % m;\n        return 0;\n    }\n    if (x == 1) {\n        a[x] = 1 % m;\n        return 1;\n    }\n    a[x] = (dfib(x - 1, m) + dfib(x - 2, m)) % m;\n    return a[x];\n}\n\nint main() {\n    long long m;\n    memset(a, 0xff, sizeof(a));\n    cin >> m;\n    for (int i = 2; i < m * m; i++) {\n        if (dfib(i, m) == 0 && dfib(i + 1, m) == 1) {\n            cout << i << endl;\n            break;\n        }\n    }\n    return 0;\n}\n```\n","tags":["题解"]},{"title":"【题解】P5738 歌唱比赛","url":"//post/solution-luogu-p5738/","content":"## 题面\n\n### 题目描述\n\n$n(n\\le 100)$ 名同学参加歌唱比赛，并接受 $m(m\\le 20)$ 名评委的评分，评分范围是 0 到 10 分。这名同学的得分就是这些评委给分中去掉一个最高分，去掉一个最低分，剩下 $m-2$ 个评分的平均数。请问得分最高的同学分数是多少？评分保留 2 位小数。\n\n### 输入格式\n\n无\n\n### 输出格式\n\n无\n\n### 输入输出样例\n\n**输入#1**\n\n```text\n7 6\n4 7 2 6 10 7\n0 5 0 10 3 10\n2 6 8 4 3 6\n6 3 6 7 5 8\n5 9 3 3 8 1\n5 9 9 3 2 0\n5 8 0 4 1 10\n```\n\n**输出#1**\n\n```text\n6.00\n```\n\n## 思路\n\n首先定义一个结构体，里面存放各个评委给出的分数、总分数和平均分。\n\n然后写一个初始化函数：\n\n```cpp\nnode() {\n    memset(this->score, 0x00, sizeof(this->score));\n    all = sum = 0.00;\n}\n```\n\n再写一个处理函数：\n\n```cpp\nvoid t(int m) {\n    for (int i = 0; i < m; i++) {\n        cin >> score[i];\n    }\n    std::sort(score, score + m);\n    for (int i = 1; i + 1 < m; i++) {\n        sum += score[i];\n    }\n    all = sum / (m - 2.00);\n}\n```\n\n这个处理函数分为了三部分：**读入**、**排序**和**按题目要求计算平均分**。\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node {\n    int    score[22];\n    double sum, all;\n\n    node() {\n        memset(this->score, 0x00, sizeof(this->score));\n        all = sum = 0.00;\n    }\n\n    void t(int m) {\n        for (int i = 0; i < m; i++) {\n            cin >> score[i];\n        }\n        std::sort(score, score + m);\n        for (int i = 1; i + 1 < m; i++) {\n            sum += score[i];\n        }\n        all = sum / (m - 2.00);\n    }\n};\n\nbool cmp(node a, node b) {\n    return a.all > b.all;\n}\n\nint main() {\n    int  n, m;\n    node student[105];\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n        student[i].t(m);\n    }\n    sort(student, student + n, cmp);\n    printf(\"%.2lf\", student[0].all);\n    return 0;\n}\n```","tags":["题解"]},{"title":"【题解】P5660 数字游戏","url":"//post/solution-luogu-p5660/","content":"\n## 题面\n\n难度：<span style=\"color: #fe4c61;\">**入门**</span>  \n标签：<span style=\"background: #e74c3c; color: #ffffff; padding: 2px 8px;\">字符串</span> <span style=\"background: #3498db; color: #ffffff; padding: 2px 8px;\">NOIP 普及组</span> <span style=\"background: #52c41a; color: #ffffff; padding: 2px 8px;\">2019</span>\n\n### 题目描述\n\n小 K 同学向小 P 同学发送了一个长度为 8 的 **01 字符串**来玩数字游戏，小 P 同学想要知道字符串中究竟有多少个 $1$。\n\n注意：01 字符串为每一个字符是 0 或者 1 的字符串，如“101”（不含双引号）为一个长度为 3 的 01 字符串。 \n\n### 输入格式\n    \n输入文件只有一行，一个长度为 8 的 01 字符串 s。\n\n### 输出格式\n    \n输出文件只有一行，包含一个整数，即 01 字符串中**字符 1** 的个数。\n\n### 输入输出样例\n\n**输入 #1**\n```text\n00010100\n```\n\n**输出 #1**\n```text\n2\n```\n\n**输入 #2**\n```text\n11111111\n```\n\n**输出 #2**\n```text\n8\n```\n            \n### 说明\n\n**【输入输出样例 1 说明】**\n\n该 01 字符串中有 2 个字符 1。 \n\n\n**【输入输出样例 2 说明】**\n\n该 01 字符串中有 8 个字符 1。\n\n**【数据规模与约定】**\n\n+ 对于 $20%$ 的数据，保证输入的字符全部为 $0$。\n+ 对于 $100%$ 的数据，输入只可能包含字符 $0$ 和字符 $1$，字符串长度固定为 $8$。\n\n\n## 做法一\n\n### 思路\n\n按字符统计给出的 01 字符串中字符 1 的个数。\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n \nusing namespace std;\n \nint main() {\n    char c;\n    int ans = 0;\n    for(int i = 0 ; i < 8 ; i++) {\n        scanf(\"%c\", &c);\n        if(c == '1') ans++;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n## 做法二\n\n### 思路\n\n还是按字符统计给出的 01 字符串中字符 1 的个数，只不过是换了个方法统计而已。\n\n### 代码\n\n```cpp\n#include<bits/stdc++.h>\n \nusing namespace std;\n \nint main() {\n    char c;\n    int ans = 0;\n    for(int i = 0 ; i < 8 ; i++) {\n        ans += getchar() - '0';\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n\n<small>神秘代码： `=zhu1YI1JIAN1cha6`</small>\n","tags":["题解"]},{"title":"给腾讯云服务器免费增加第二个 IP","url":"//post/tencent-cloud-cvm-dual-ip/","content":"## 前言\n\n良心云果然是良心云，增加了一个IP四舍五入居然不要钱，不过还是要登进系统配置一下双IP的。\n\n<!-- more -->\n\n![](https://vip2.loli.net/2020/11/26/rAyvBmDw2bdMP6t.jpg)\n\n和客服的对话\n\n## 增加网卡&公网IP\n\n![](https://vip2.loli.net/2020/11/26/SWwlbLRaHACnuBz.png)\n\n点击按钮新建一个弹性网卡并绑定\n\n![](https://vip1.loli.net/2020/11/26/sJqBfdbv4eRzZFm.png)\n\n绑定完以后可以在服务器的弹性网卡管理页面看到详情\n\n![](https://vip1.loli.net/2020/11/26/ivPFgfH69XTCo8Z.png)\n\n点击新建的弹性网卡，进入管理页面，并记录下这张网卡的**内网IP**，稍后会用到\n\n![](https://vip1.loli.net/2020/11/26/FAy8U5lpzNtuMTi.png)\n\n点击绑定按钮，并申请一个弹性公网IP\n\n![](https://vip2.loli.net/2020/11/26/AbZ4vTwr1UCdz2n.png)\n![](https://vip2.loli.net/2020/11/26/2G5jsdTSZrocqwh.png)\n\n此时弹性公网IP已经绑定成功，并且可以看到已经变为不收取IP资源费的状态了\n\n![](https://vip1.loli.net/2020/11/26/x8q7I5E2dMSDt4B.png)\n\n查看主网卡的**内网IP**，并记录下这个IP，稍后会用到\n\n## 配置服务器的网络设置\n\n使用 `ip addr` 查看网卡名称，并记录下来\n\n![](https://vip2.loli.net/2020/11/26/Ofh8CzvnYKPGsH7.png)\n\n切换到网卡配置文件目录\n\n```bash\ncd /etc/sysconfig/network-scripts/\n```\n\n编辑 `ifcfg-eth0` 文件，将下方内容修改后填入\n\n```\nDEVICE=\"eth0\"             # 弹性网卡名称\nNM_CONTROLLED=\"yes\"       # 是否由 Network Manager 控制该网络接口\nONBOOT=\"yes\"              # 系统启动时是否激活\nIPADDR=\"172.21.0.10\"      # 弹性网卡上的 IP 地址\nNETMASK=\"255.255.240.0\"   # 子网掩码\nGATEWAY=\"172.21.0.1\"      # 网关\n```\n\n+ 其中 `IPADDR` 填写主网卡的**内网IP**。\n+ 子网掩码可以使用 [V2EX 提供的 IPv4 子网查询工具](https://www.v2ex.com/tools/ipv4) 查询对应的子网。\n+ 网关根据创建网卡时选择的子网而定。\n\n新建 `ifcfg-eth1` 文件，将下方内容修改后填入\n\n```\nDEVICE=\"eth1\"             # 需配置的弹性网卡名称（此处是新添加的网卡名称）\nNM_CONTROLLED=\"yes\"       # 是否由 Network Manager 控制该网络接口\nONBOOT=\"yes\"              # 系统启动时是否激活\nIPADDR=\"172.21.0.12\"      # 弹性网卡上的 IP 地址\nNETMASK=\"255.255.240.0\"   # 子网掩码\n# GATEWAY=\"172.21.0.1\"    # 网关（若与eth0的网关不同，需要删除注释并修改为正确的网关）\n```\n\n+ 其中 `IPADDR` 填写新添加网卡的**内网IP**。\n+ 子网掩码可以 [V2EX 提供的 IPv4 子网查询工具](https://www.v2ex.com/tools/ipv4) 查询对应的子网。\n+ 网关根据创建网卡时选择的子网而定。\n\n保存后重启网络服务。\n\n```bash\nservice network restart\n```\n\n![](https://vip1.loli.net/2020/11/26/ReBSM4C9oF2HbVi.png)\n\n## 配置路由（可选）\n\n> 按照上述步骤配置好后，Linux 还是默认都从主网卡发包。\n> 您可通过策略路由让报文从哪个网卡进，并从该网卡返回。\n\n### 创建路由表\n\n```bash\necho \"10 t1\" >> /etc/iproute2/rt_tables\necho \"20 t2\" >> /etc/iproute2/rt_tables\n```\n\n### 添加默认路由\n\n```bash\nip route add default dev eth0 via 172.21.0.1 table 10\nip route add default dev eth1 via 172.21.0.1 table 20\n```\n\n> 上述两个命令中，172.21.0.1要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。\n\n### 配置策略路由\n\n```bash\nip rule add from 172.21.0.10 table 10\nip rule add from 172.21.0.12 table 20\n```\n","tags":["Linux","网络"]},{"title":"配置 nginx 只允许 CloudFlare 的 IP 回源","url":"//post/nginx-cloudflare-ip-only/","content":"\n配置好 CloudFlare 后，建议禁止非 CloudFlare IP 访问源站来防止一些不好的事情发生。\n\n<!-- more -->\n\n## 配置\n\n在站点配置文件中增加以下内容[^1] :\n\n```nginx\n# Cloudflare (IPv4 - https://www.cloudflare.com/ips-v4)\nallow 173.245.48.0/20;\nallow 103.21.244.0/22;\nallow 103.22.200.0/22;\nallow 103.31.4.0/22;\nallow 141.101.64.0/18;\nallow 108.162.192.0/18;\nallow 190.93.240.0/20;\nallow 188.114.96.0/20;\nallow 197.234.240.0/22;\nallow 198.41.128.0/17;\nallow 162.158.0.0/15;\nallow 104.16.0.0/12;\nallow 172.64.0.0/13;\nallow 131.0.72.0/22;\nallow 36.27.212.0/24;\nallow 123.129.232.0/24;\n\n# Cloudflare (IPv6 - https://www.cloudflare.com/ips-v6)\nallow 2400:cb00::/32;\nallow 2405:8100::/32;\nallow 2405:b500::/32;\nallow 2606:4700::/32;\nallow 2803:f800::/32;\nallow 2c0f:f248::/32;\nallow 2a06:98c0::/29;\n\n# Others\ndeny all;\n```\n\n## 后记\n\n这个配置文件可以自己生成。\n\n## 参考资料\n\n[^1]: [CloudFlare IP Ranges (Last updated: February 21, 2019)](https://www.cloudflare.com/ips/)\n","tags":["网络"]},{"title":"【多图】在 VMware 上安装 macOS 11 Big Sur Beta","url":"//post/vmware-macos-bigsur/","content":"\n## 工具准备\n\n+ 文件：`BigSur.cdr`\n+ 文件：`unlocker.zip`  \n+ 软件：`VMware Workstation Pro 15`\n\n文末会给出上述工具的下载地址。\n\n## 安装 VMware\n\n安装步骤这里不再细说。\n\n不过这里来说下 `VMware 15.5.5` 以后 VMware 和 微软的新动作：`VMware` 和 `Hyper-V` 可以共存了~<small>[1][2]</small>   \n\n**注：需 Windows 10 2004 以上版本的系统*\n\n只需要在安装时勾选下图所示的选项即可：\n\n![](https://vip1.loli.net/2020/12/13/5OcenBTq1jNzhpV.png)\n\n于是，我的 WSL2 和我的 Docker Desktop 可以和 VMware 一起愉快的玩耍辣😆~\n\n## 解锁 VMware\n\n条件：先关闭 VMware 的所有进程。\n\n### Windows\n\n解压 Unlocker.zip 内的所有文件到一个文件夹中，右键 `win-install.cmd` ，选择“以管理员身份运行”，等待运行完毕即可。\n\n### Linux\n\n使用以下命令解锁 VMware ：\n\n```bash\nunzip unlocker.zip\nchmod +x lnx-install.sh\nsudo bash lnx-install.sh\n```\n\n检验方法：创建虚拟机时是否可以选择 macOS 系统。\n\n## 创建虚拟机\n\n![](https://vip2.loli.net/2020/12/13/XsklfzviZH52W1b.png)\n\n▲ 打开 `VMware Workstation 15` ，选择 “新建虚拟机”。\n\n![](https://vip1.loli.net/2020/12/13/LkQCmegM7rXo5fv.png)\n\n▲ 初始页面\n\n![](https://vip2.loli.net/2020/12/13/7EHteuSpzjUPXnF.png)\n\n▲ 硬件兼容性\n\n![](https://vip2.loli.net/2020/12/13/V69RyPoevf3a54z.png)\n\n▲ 镜像配置\n\n  我们创建完成后再挂载镜像，选择“稍后安装操作系统”。\n\n![](https://vip2.loli.net/2020/12/13/MCty81QcrugavZd.png)\n\n▲ 选择系统版本\n\n  由于 Unlocker 最高只支持 macOS 10.16 ，所以这里选择最高的版本即 macOS 10.16 。\n\n![](https://vip2.loli.net/2020/12/13/KtWfMrTvXZGxBVc.png)\n\n▲ 设置虚拟机名称、选择存储位置\n\n![](https://vip2.loli.net/2020/12/13/gnMWvl6Qhctreyw.png)\n\n▲ 设置 CPU 核心数量\n\n![](https://vip2.loli.net/2020/12/13/fXaZm8Ol6D73TBR.png)\n\n▲ 调整内存大小\n\n![](https://vip2.loli.net/2020/12/13/8HbAItsv6SQG53j.png)\n\n▲ 网络配置\n\n![](https://vip1.loli.net/2020/12/13/875sIHFRMbvndLu.png)\n\n▲ IO 配置\n\n![](https://vip2.loli.net/2020/12/13/MnxHIWXyJGrRDcA.png)\n\n▲ 磁盘配置\n\n![](https://vip2.loli.net/2020/12/13/PodpwtYKNfyrQk1.png)\n\n▲ 磁盘配置\n\n![](https://vip1.loli.net/2020/12/13/Tcx4GnBXIlJgjRF.png)\n\n▲ 磁盘配置\n\n![](https://vip1.loli.net/2020/12/13/KhRYtIU692Bx5Cw.png)\n\n▲ 磁盘配置\n\n![](https://vip1.loli.net/2020/12/13/ncrqyEHemAD5kpu.png)\n\n▲ 完成！\n\n## 配置虚拟机\n\n在 vmx 文件末尾添加以下内容并保存。\n\n```\nsmc.version = \"0\"\nhw.model = \"MacBookPro16,1\"\nboard-id = \"Mac-E1008331FDC96864\"\nboard-id.reflectHost = \"TRUE\"\n```\n\n## 挂载安装镜像\n\n点击“编辑虚拟机设置”，选择“CD/DVD”选项。\n\n![](https://vip2.loli.net/2020/12/13/KVdIk9ZXcqH2aBG.png)\n\n如图所示，先勾选“使用 ISO 映像文件”选项，再点击浏览，点击“所有文件”，选中 `bigsur.cdr` 并确认。\n\n保存以后点击“开启虚拟机”\n\n## 安装 macOS\n\n![](https://vip2.loli.net/2020/12/13/zsFHvAyPN8RBTnc.png)\n\n▲ 耐心等待加载\n\n![](https://vip1.loli.net/2020/12/13/cK7PEd2wJ4j3shO.png)\n\n▲ 选择中文并继续\n\n![](https://vip2.loli.net/2020/12/13/qZtEFjMzgTOsVhJ.png)\n\n▲ 选中磁盘工具并打开\n\n![](https://vip2.loli.net/2020/12/13/oywQHiUkIALxDcM.png)\n\n▲ 找到名称为 `VMware Virtual SATA Hard Drive Media` 的磁盘，选中该磁盘\n\n![](https://vip2.loli.net/2020/12/13/KitXEPgHakBNbMO.png)\n\n▲ 抹掉名称为 `VMware Virtual SATA Hard Drive Media` 的磁盘，格式选择 `APFS`\n\n![](https://vip2.loli.net/2020/12/13/e6rjZxK4AL9wN8n.png)\n\n▲ 退出磁盘工具，选择 `安装 macOS` 并继续\n\n![](https://vip1.loli.net/2020/12/13/8xAyUC3togLSlQJ.png)\n\n▲ 点击继续开始正式安装\n\n![](https://vip2.loli.net/2020/12/13/axXkKfTndAPVNts.png)\n\n▲ 同意条款与条件\n\n![](https://vip1.loli.net/2020/12/13/QbyZxRqrdDNAuJU.png)\n\n▲ 选择安装位置\n\n![](https://vip1.loli.net/2020/12/13/kaIrlscM1mt87wF.png)\n\n▲ 开始安装\n\n![](https://vip2.loli.net/2020/12/13/Wh4qSs2oxYc13E6.png)\n\n▲ 上面显示的剩余时间通常都是忽悠人的，得等好久\n\n## 配置 macOS\n\n![](https://vip2.loli.net/2020/12/13/14eXWOKTdbUg8kM.png)\n\n▲ 首先选择国家和地区\n\n*接下来按照自己需求配置即可，到**配置迁移助理**时选择`以后`*\n\n![](https://vip1.loli.net/2020/12/13/9u1R7XxeGNy6c8C.png)\n\n▲ 选择 `以后`\n\n![](https://vip2.loli.net/2020/12/13/exTUZudn6WLsKzy.png)\n\n▲ 选择 `稍后设置`\n\n![](https://vip1.loli.net/2020/12/13/8BxFmJTZ13WLYr2.png)\n\n▲ All done!\n\n## 安装 VMware Tools\n\n在 VMware 的 `虚拟机(M)` 菜单栏中选择 `安装 VMware Tools(T)...` 选项。\n\n![](https://vip2.loli.net/2020/12/13/6tTqm4uYsl5byAr.png)\n\n之后按照步骤操作就行啦~\n\n## 参考资料\n\n[1] [VMware Blogs: VMware Workstation 15.5 Now Supports Host Hyper-V Mode](https://blogs.vmware.com/workstation/2020/05/vmware-workstation-now-supports-hyper-v-mode.html)\n[2] [Microsoft Tech Community: VMware Workstation and Hyper-V](https://techcommunity.microsoft.com/t5/virtualization/vmware-workstation-and-hyper-v/ba-p/1419928)\n\n## 文件下载\n\n### 百度网盘\n\n+ 链接：<https://pan.baidu.com/s/1m_iwiZK1XVIhwrrpCenB3Q> \n+ 提取码：`blog`\n","tags":["macOS"]},{"title":"【随笔】修改 Git 配置加速 clone GitHub 源码","url":"//post/clone-github-repo-faster/","content":"设置代理：\n\n```bash\n# socks5协议，1080端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  socks5://127.0.0.1:1080\ngit config --global https.https://github.com.proxy socks5://127.0.0.1:1080\n\n# http协议，7890端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  http://127.0.0.1:7890\ngit config --global https.https://github.com.proxy http://127.0.0.1:7890\n```\n之后运行 `git config -l` 即可查看代理设置情况。\n\n清除代理：\n\n```shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n","tags":["随笔","Git"]},{"title":"【补档】handsome 魔改教程：左侧边栏输出优化","url":"//post/handsome-leftbar-layout/","content":"感觉 handsome 自带的左侧边栏显示方法不太合适，于是自己参照了UCW大佬的教程 [优化侧栏显示：实现更加美观的分类展示](https://ucw.moe/archives/handsome-aside-category.html) 改了一下。\n\n<!-- more -->\n\n## 修改方法\n\n### 前置操作\n\n建议引入 [Font Awesome](https://fontawesome.dashgame.com/) 图标库，在 `主题后台设置 -> 开发者设置 -> 自定义输出 head 头部的 HTML 代码` 里面添加下面的代码即可。\n\n```html\n<link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n```\n\n上面的 `Font Awesome` 的 css 文件来自 BootCDN 提供，你也可以替换成自己的文件。\n\n### 改代码\n\n首先，打开 `libs/Content.php` ，在蓝线所示的位置：\n\n![](https://vip2.loli.net/2020/11/26/3J7jpP5W6uqkAwO.png)\n\n插入下面的代码：\n\n```php\n/**\n *\n * @param $categories\n * @return string\n */\npublic static function returnAsideCategories($categories){\n    $html    = \"\";\n    $options = mget();\n    $icons   = array(\n        'default' => 'glyphicon glyphicon-tasks',\n        'github'  => 'fa fa-github'\n        /**\n         *  格式：  '分类缩略名' => '图标名称',\n         */\n    );\n    while($categories->next()) {\n        if ($categories->levels === 0) {\n            $children = $categories->getAllChildren($categories->mid);\n            if (!empty($children)) {\n                $html .= '<li><a class=\"auto\"><span class=\"pull-right text-muted\"><i class=\"fontello icon-fw fontello-angle-right text\"></i><i class=\"fontello icon-fw fontello-angle-down text-active\"></i></span><span class=\"nav-icon\"><i class=\"' . $icons[$categories->slug] . '\"></i></span><span>' . $categories->name . '</span></a>';\n                $childCategoryHtml =  '<ul class=\"nav nav-sub dk\"><li class=\"nav-sub-header\"><a><span>' . $categories->name . '</span></a></li>';\n                foreach($children as $mid){\n                    $child = $categories->getCategory($mid);\n                    $childCategoryHtml .= '<li><a href=\"' . $child['permalink'] . '\"><b class=\"badge pull-right\">' . $child['count'] . '</b><i class=\"' . $icons[$child['slug']] . '\"></i><span>' . $child['name'] . '</span></a></li>';\n                }\n                $childCategoryHtml .= '</ul>';\n                $html .= $childCategoryHtml;\n                $html .= \"</li>\";\n            } else {\n                $html .= '<li><a href=\"' . $categories->permalink . '\" class=\"auto\"><b class=\"badge pull-right\">' . $categories->count . '</b><span class=\"nav-icon\"><i class=\"'.$icons[$categories->slug].'\"></i></span><span>' . $categories->name . '</span></a></li>';\n            }\n        }\n    }\n    return $html;\n}\n```\n\n在 `component/aside.php` 中找到以下代码（大约 `131 ~ 160` 行），删除。\n\n```php\n              <!--分类category-->\n                <?php\n                $class = \"\";\n                    if (in_array(\"openCategory\",$this->options->featuresetup)){\n                        $class = \"class=\\\\\"active\\\\\"\";\n                    }\n                    ?>\n              <li <?php echo $class; ?>>\n                <a class=\"auto\">\n                  <span class=\"pull-right text-muted\">\n                    <i class=\"fontello icon-fw fontello-angle-right text\"></i>\n                    <i class=\"fontello icon-fw fontello-angle-down text-active\"></i>\n                  </span>\n<!--                  <i class=\"glyphicon glyphicon-th\"></i>-->\n                    <span class=\"nav-icon\"><i data-feather=\"grid\"></i></span>\n\n                    <span><?php _me(\"分类\") ?></span>\n                </a>\n                <ul class=\"nav nav-sub dk\">\n                  <li class=\"nav-sub-header\">\n                    <a>\n                      <span><?php _me(\"分类\") ?></span>\n                    </a>\n                  </li>\n                  <!--循环输出分类-->\n                    <?php\n                    $this->widget('Widget_Metas_Category_List')->to($categorys);\n                    echo Content::returnCategories($categorys) ?>\n                </ul>\n              </li>\n```\n\n然后在下图蓝线所示的位置（ `127` 行左右 ）\n\n![](https://vip2.loli.net/2020/11/26/H1s2CGy9NtWrgdh.png)\n\n插入以下代码：\n\n```php\n                 <!--start-->\n              <li class=\"line dk\"></li>\n             \n\t\t\t<!--Components-->\n              <li class=\"hidden-folded padder m-t m-b-sm text-muted text-xs\">\n                <span><?php _me(\"分类\") ?></span>\n              </li>\n              <!--分类category-->\n              <!--循环输出分类-->\n              <?php\n              $this->widget('Widget_Metas_Category_List')->to($categorys);\n              echo Content::returnAsideCategories($categorys) ?>\n              <!--end-->\n```\n\n然后，刷新你的博客，是不是就有效果了呢？\n\n## 图标设置\n\n设置方法：在 `$icons` 的 array 数组中插入 `'分类缩略名' => '图标'` 即可。\n\n### Font Awesome\n\n如果你引入了 `Font Awesome` 的图标的话，可以到 <https://fontawesome.dashgame.com/> 选择你喜欢的图标使用。\n\n#### 使用方法\n\n在 <https://fontawesome.dashgame.com/> 挑一个图标，在图标的名字前加入 `fa fa-` 即可。 \n\n#### 使用样例\n\n使用 `archive` 图标时：\n\n![](https://vip2.loli.net/2020/11/26/POyaCjgLveKJMDE.png)\n\n对应在 `$icons` 的 array 数组中插入的代码：\n\n```php\n'archives' => 'fa fa-archive'\n```\n\n### Fontello\n\nhandsome 主题自带部分 `fontello` 图标，具体列表可在 [handsome 主题文档](https://auth.ihewro.com/user/docs/#/icons) 查看。\n\n#### 使用方法\n\n在图标的名字前加入 `fontello fontello-` 即可。 \n\n\n#### 使用样例\n\n与 `Font Awesome` 相似，在此不多赘述。\n\n### Feather\n\nhandsome 主题自带 `feather` 的所有图标，在此处使用需要一些变通措施。\n\n#### 使用方法\n\n在 <https://feathericons.com/> 选取好你需要的图标。\n\n然后在名称前插入 `\" data-feather=\"` ，再输入名称即可。\n\n#### 使用样例\n\n以 `airplay` 为例：\n\n![](https://vip1.loli.net/2020/11/26/ObX7A1yuHoUj9fk.png)\n\n输入 `'airplay' => '\" data-feather=\"airplay'` 即可。\n\n### 其他 SVG 格式的图标\n\n###  使用方法\n\n在 svg 的开头加入 `\"></i>` ，在结尾加入 `<i` 即可。\n\n\n### 使用样例\n\n下载下来的 `svg` 文件内容：\n\n![](https://vip1.loli.net/2020/11/26/ukVefHwLng2PWhb.png)\n\n将其复制，然后在 `$icons` 的 array 数组中插入的代码：\n\n```php\n'airplay' => '\"></i><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-airplay\"><path d=\"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1\"/><polygon points=\"12 15 17 21 7 21 12 15\"/></svg><i '\n```\n\n## 后记\n\n### 报错解决\n\n报错 `syntax error, unexpected 'xxx' (T_CONSTANT_ENCAPSED_STRING), expecting ')'` 咋办？\n\n检查你设置图标时的语法是否正确，正确语法如下：\n\n```php\n$icons = array(\n    'aaaaaaa'  => 'glyphicon glyphicon-xx',\n    'bbbb'     => 'glyphicon glyphicon-xxxxxx',\n    'cccccc'   => 'fa fa-xxxxx',\n    'dddddddd' => 'fa fa-xxxx',\n    'eeeee'    => 'glyphicon glyphicon-xxxx',\n    'fff'      => 'fa fa-xxxxx'\n)\n```\n\n{% warn 注意 %}\n`array` 函数的参数中除了最后一行，每一行末尾都有一个 `,`\n{% endwarn %} \n\n*本文为补档文章，原系统中最后一次修改时间：2020年4月12日 23:31:25*\n*本文代码已经适配 handsome 7.2 版本，可放心使用。*\n\n","tags":["web"]},{"title":"关于","url":"/about/index.html","content":"\n## 关于博客\n\n### 关于图片\n\n图片使用 [SM.MS 图床](https://sm.ms/) 存储，已开通 LifeTime Premium VIP。\n\n### 关于评论\n\n评论使用 DisqusJS ，墙内仅能获取评论列表，若需要使用全部功能请在墙外访问，如果使用代理，请将 `*.disqus.com` `disq.us` `*.disquscdn.com` 加入代理列表。\n\n<details>\n<summary>评论语法</summary>\n\nDisqus 评论支持使用部分 **HTML** 标签。\n注：下方的 `{{ text }}` 表示显示文字，`{{ link }}` 表示链接，`{{ code }}` 表示代码，`{{ code_language }}` 表示代码语言。\n\n下方列出了一些能使用的常用标签。为了方便查看，这些标签都是以单行形式呈现的。\n\n语法 | 含义\n-- | --\n`<b>{{ text }}</b>` | 粗体文本\n`<blockquote>{{ text }}</blockquote>` | 引用文本\n`<i>{{ text }}</i>` | 斜体文本\n`<a href=\"{{ link }}\">{{ text }}</a>` | 超链接\n`<code>{{ code }}</code>` | 行内代码\n`<pre><code class=\"{{ code_language }}\">{{ code }}</code></pre>` | 代码块\n\n详情请见：[What HTML tags are allowed within comments? - Disqus Help](https://help.disqus.com/en/articles/1717235-what-html-tags-are-allowed-within-comments)\n\n</details>\n\n### 变更记录\n\n+ **2020/06/23** 切换到静态博客平台\n+ **2020/07/22** 更换到新域名 `baoshuo.blog`\n+ **2020/11/25** 将所有图片迁移到 SM.MS 图床上。\n  + ✨访问速度提升了耶\n  + ✨稳定性更好了耶\n+ **2020/12/06** 换回旧域名 `blog.baoshuo.ren` ，迁回到国内服务器。\n+ **2021/02/01** 迁移博客到 Hexo 平台\n\n## 关于我\n\n### 关于语言\n\n+ 中文（zh-CN） $\\color{green}{\\text{★★★★★}}$ **母语**\n+ 英文（en-US） $\\color{orange}{\\text{★★★☆☆}}$\n\n### 关于技术\n\n+ C++ $\\color{green}{\\text{★★★★★}}$\n+ HTML $\\color{green}{\\text{★★★★★}}$ <small>(HTML is a programming language!)</small>\n+ C $\\color{green}{\\text{★★★★★}}$\n+ JavaScript $\\color{orange}{\\text{★★★★☆}}$\n+ CSS $\\color{orange}{\\text{★★★★☆}}$\n+ PHP $\\color{orange}{\\text{★★★☆☆}}$\n+ Python $\\color{orange}{\\text{★★★☆☆}}$\n+ Shell $\\color{red}{\\text{★★☆☆☆}}$\n\n### 个人属性\n\n正经、穷、菜...\n\n### 关于竞赛\n\n> 竞赛不是火，却能点亮一生。 —— 石家庄二中实验学校 · 信息技术中心\n\n## 联系我\n\n+ 主页： [baoshuo.ren](https://baoshuo.ren)\n+ 邮箱： [i@baoshuo.ren](mailto:i@baoshuo.ren)\n+ Telegram： [@baoshuo](https://t.me/baoshuo)\n+ Twitter：[@renbaoshuo](https://twitter.com/renbaoshuo)\n\n## 版权相关\n\n+ [Pure](https://imhanjie.com/post/gridea-theme-pure/) 主题（修改版）\n+ 使用 [Hexo](https://hexo.io) 构建博客\n+ 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)  许可协议。转载请在**文中明显位置**注明出处。\n"},{"title":"友情链接","url":"/friends/index.html","content":"\n请前往 [renbaoshuo/Friends](https://github.com/renbaoshuo/Friends) 申请友链。\n"}]